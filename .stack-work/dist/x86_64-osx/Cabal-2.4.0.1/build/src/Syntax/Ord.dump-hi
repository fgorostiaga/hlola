
==================== FINAL INTERFACE ====================
2019-10-21 10:04:17.448841 UTC

interface HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Syntax.Ord 8065
  interface hash: cd9de8f1b4473c783b67197ca03376c8
  ABI hash: 3abef8f6c923bbd6adef89f28a0cd4f8
  export-list hash: ee3875b9880152641006c5630eff6401
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3647df3ab7c5fd7960364a59d6d86979
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Syntax.Ord.<
  Syntax.Ord.<=
  Syntax.Ord.>
module dependencies: Lola Syntax.HLPrelude
package dependencies: aeson-1.4.5.0 array-0.5.3.0
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 binary-0.8.6.0 bytestring-0.10.8.2
                      containers-0.6.0.1 deepseq-1.4.4.0 dlist-0.8.0.7 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 primitive-0.6.4.0 random-1.1
                      scientific-0.3.6.2 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-compat-1.9.2.2 transformers-0.5.6.2
                      unordered-containers-0.2.10.0 uuid-types-1.0.3 vector-0.12.0.3
orphans: attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.5.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.7:Data.DList ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  Lola f52d080a9c6c535055cc2d321870899c
  exports: f0b2b11faceeef480fb3969a0b54aac2
  <$> 5dbf6fc938f9b138f5c32cf20fb73d22
  <*> 8031fcbaf5917c21a272faf5dc82b09a
  Expr b276a145c92628a19f5bf124ea374e0b
  Streamable 47494beae3139bbfdc210ceee05782ca
import  -/  Syntax.HLPrelude f80a67bea1d500b91e76dd8341487f94
  exports: 68fbd00b85e22e00f4229825fd729bf8
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
fixities infix 4 <, infix 4 <=, infix 4 >
0e29fab6baedef852b44b36f6cd5b849
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Syntax.Ord.$trModule3
                   Syntax.Ord.$trModule1) -}
c8b9960afd050b492d7a3b4dee4bc425
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Syntax.Ord.$trModule2) -}
a538729315984b0c9ee920add4b0aa39
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Syntax.Ord"#) -}
2ad5a381104295a176c1208c98dc65f2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Syntax.Ord.$trModule4) -}
e36ca51139ee9333adc1e31d818f0f5e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ"#) -}
24b44025f852123b634301d64d627956
  (<) ::
    (GHC.Classes.Ord a, Lola.Streamable a) =>
    Lola.Expr a -> Lola.Expr a -> Lola.Expr GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dTypeable :: Lola.Streamable a) ->
                 let {
                   $dTypeable1 :: Data.Typeable.Internal.TypeRep (a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               Syntax.Ord.<2) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case Syntax.Ord.<1 of dt4 { Data.Typeable.Internal.TrTyCon ipv ipv1 ipv2 ipv3 ipv4 ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ GHC.Types.Bool
                       @~ <*>_N
                       @~ <a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   $dTypeable2 :: Data.Typeable.Internal.TypeRep
                                    (a -> a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               (GHC.Types.:
                                  @ GHC.Fingerprint.Type.Fingerprint
                                  (Data.Typeable.Internal.typeRepFingerprint
                                     @ *
                                     @ (a -> GHC.Types.Bool)
                                     $dTypeable1)
                                  (GHC.Types.[]
                                     @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case $dTypeable1 of dt4 { DEFAULT ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ (a -> GHC.Types.Bool)
                       @~ <*>_N
                       @~ <a -> a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   lvl :: a -> a -> GHC.Types.Bool = GHC.Classes.< @ a $dOrd
                 } in
                 let {
                   lvl1 :: Lola.Expr (a -> a -> GHC.Types.Bool)
                   = Lola.Leaf
                       @ (a -> a -> GHC.Types.Bool)
                       $dTypeable2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                          -> a -> GHC.Types.Bool>_N)
                       lvl
                 } in
                 \ (a1 :: Lola.Expr a) (b :: Lola.Expr a) ->
                 Lola.App
                   @ GHC.Types.Bool
                   @ a
                   Syntax.Ord.<1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   $dTypeable1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                      -> GHC.Types.Bool>_N)
                   $dTypeable
                   (Lola.App
                      @ (a -> GHC.Types.Bool)
                      @ a
                      $dTypeable1
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> GHC.Types.Bool>_N)
                      $dTypeable2
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> a -> GHC.Types.Bool>_N)
                      $dTypeable
                      lvl1
                      a1)
                   b) -}
609e6364298525d9907e49b34e17b030
  <1 :: Data.Typeable.Internal.TypeRep GHC.Types.Bool
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Bool
                        14182099612280475667##
                        2734577064602454082##
                        GHC.Types.$trModule
                        GHC.Types.$tcBool1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ GHC.Types.Bool
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
6aaa3d246a7d53440d64b9aa451efc0e
  <2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Syntax.Ord.<3
                   (GHC.Types.[] @ GHC.Fingerprint.Type.Fingerprint)) -}
829b07bccb65d22b1c5ba950b9eb2d0e
  <3 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Syntax.Ord.<1 of wild { Data.Typeable.Internal.TrTyCon dt dt1 ds1 ds2 ds3 ->
                 GHC.Fingerprint.Type.Fingerprint dt dt1 }) -}
71950b8323da44ade5981764b7915a6e
  (<=) ::
    (GHC.Classes.Ord a, Lola.Streamable a) =>
    Lola.Expr a -> Lola.Expr a -> Lola.Expr GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U(A,A,A,1*U,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dTypeable :: Lola.Streamable a) ->
                 let {
                   $dTypeable1 :: Data.Typeable.Internal.TypeRep (a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               Syntax.Ord.<2) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case Syntax.Ord.<1 of dt4 { Data.Typeable.Internal.TrTyCon ipv ipv1 ipv2 ipv3 ipv4 ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ GHC.Types.Bool
                       @~ <*>_N
                       @~ <a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   $dTypeable2 :: Data.Typeable.Internal.TypeRep
                                    (a -> a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               (GHC.Types.:
                                  @ GHC.Fingerprint.Type.Fingerprint
                                  (Data.Typeable.Internal.typeRepFingerprint
                                     @ *
                                     @ (a -> GHC.Types.Bool)
                                     $dTypeable1)
                                  (GHC.Types.[]
                                     @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case $dTypeable1 of dt4 { DEFAULT ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ (a -> GHC.Types.Bool)
                       @~ <*>_N
                       @~ <a -> a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   lvl :: a -> a -> GHC.Types.Bool = GHC.Classes.<= @ a $dOrd
                 } in
                 let {
                   lvl1 :: Lola.Expr (a -> a -> GHC.Types.Bool)
                   = Lola.Leaf
                       @ (a -> a -> GHC.Types.Bool)
                       $dTypeable2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                          -> a -> GHC.Types.Bool>_N)
                       lvl
                 } in
                 \ (a1 :: Lola.Expr a) (b :: Lola.Expr a) ->
                 Lola.App
                   @ GHC.Types.Bool
                   @ a
                   Syntax.Ord.<1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   $dTypeable1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                      -> GHC.Types.Bool>_N)
                   $dTypeable
                   (Lola.App
                      @ (a -> GHC.Types.Bool)
                      @ a
                      $dTypeable1
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> GHC.Types.Bool>_N)
                      $dTypeable2
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> a -> GHC.Types.Bool>_N)
                      $dTypeable
                      lvl1
                      a1)
                   b) -}
461f582225ae2b16a79f9a8663c790a1
  (>) ::
    (GHC.Classes.Ord a, Lola.Streamable a) =>
    Lola.Expr a -> Lola.Expr a -> Lola.Expr GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,1*U,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dTypeable :: Lola.Streamable a) ->
                 let {
                   $dTypeable1 :: Data.Typeable.Internal.TypeRep (a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               Syntax.Ord.<2) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case Syntax.Ord.<1 of dt4 { Data.Typeable.Internal.TrTyCon ipv ipv1 ipv2 ipv3 ipv4 ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ GHC.Types.Bool
                       @~ <*>_N
                       @~ <a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   $dTypeable2 :: Data.Typeable.Internal.TypeRep
                                    (a -> a -> GHC.Types.Bool)
                   = case GHC.Magic.noinline
                            @ ([GHC.Fingerprint.Type.Fingerprint]
                               -> GHC.Fingerprint.Type.Fingerprint)
                            GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.typeRepFingerprint
                                  @ *
                                  @ a
                                  $dTypeable
                                    `cast`
                                  (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N))
                               (GHC.Types.:
                                  @ GHC.Fingerprint.Type.Fingerprint
                                  (Data.Typeable.Internal.typeRepFingerprint
                                     @ *
                                     @ (a -> GHC.Types.Bool)
                                     $dTypeable1)
                                  (GHC.Types.[]
                                     @ GHC.Fingerprint.Type.Fingerprint))) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                     case $dTypeable
                            `cast`
                          (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of dt3 { DEFAULT ->
                     case $dTypeable1 of dt4 { DEFAULT ->
                     Data.Typeable.Internal.TrFun
                       @ *
                       @ (a -> a -> GHC.Types.Bool)
                       @ 'GHC.Types.LiftedRep
                       @ 'GHC.Types.LiftedRep
                       @ a
                       @ (a -> GHC.Types.Bool)
                       @~ <*>_N
                       @~ <a -> a -> GHC.Types.Bool>_N
                       dt1
                       dt2
                       dt3
                       dt4 } } }
                 } in
                 let {
                   lvl :: a -> a -> GHC.Types.Bool = GHC.Classes.> @ a $dOrd
                 } in
                 let {
                   lvl1 :: Lola.Expr (a -> a -> GHC.Types.Bool)
                   = Lola.Leaf
                       @ (a -> a -> GHC.Types.Bool)
                       $dTypeable2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                          -> a -> GHC.Types.Bool>_N)
                       lvl
                 } in
                 \ (a1 :: Lola.Expr a) (b :: Lola.Expr a) ->
                 Lola.App
                   @ GHC.Types.Bool
                   @ a
                   Syntax.Ord.<1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   $dTypeable1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                      -> GHC.Types.Bool>_N)
                   $dTypeable
                   (Lola.App
                      @ (a -> GHC.Types.Bool)
                      @ a
                      $dTypeable1
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> GHC.Types.Bool>_N)
                      $dTypeable2
                        `cast`
                      (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <a
                                                                         -> a -> GHC.Types.Bool>_N)
                      $dTypeable
                      lvl1
                      a1)
                   b) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

