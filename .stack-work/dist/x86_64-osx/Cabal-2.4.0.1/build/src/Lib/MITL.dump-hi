
==================== FINAL INTERFACE ====================
2019-10-21 10:04:18.164557 UTC

interface HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Lib.MITL 8065
  interface hash: e6ae2eab49d4507aa776f290164c233f
  ABI hash: ab74d8badd6b512c33898f962ebc8a99
  export-list hash: b1e72598016b2429c1840a5e63cbba83
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2ffb850d1576b8f92b6f7d4734f329bb
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.MITL.andMITL
  Lib.MITL.eventuallyMITL
  Lib.MITL.notMITL
  Lib.MITL.until'
  Lib.MITL.untilMITL
module dependencies: Lib.Utils Lola Syntax.Booleans
                     Syntax.HLPrelude Syntax.Ord
package dependencies: aeson-1.4.5.0 array-0.5.3.0
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 binary-0.8.6.0 bytestring-0.10.8.2
                      containers-0.6.0.1 deepseq-1.4.4.0 dlist-0.8.0.7 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 primitive-0.6.4.0 random-1.1
                      scientific-0.3.6.2 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-compat-1.9.2.2 transformers-0.5.6.2
                      unordered-containers-0.2.10.0 uuid-types-1.0.3 vector-0.12.0.3
orphans: attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.5.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.7:Data.DList ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  Lib.Utils a741977eb01fbbecda6505024611855e
  exports: 179ea7b1e0fab088922dc6fd18e202be
import  -/  Lola f52d080a9c6c535055cc2d321870899c
  exports: f0b2b11faceeef480fb3969a0b54aac2
  :@ 0e91454cfe22ab22364b2d071c8db005
  <: ede31a85d24f5fc58211abc6c1cf47eb
  =: 8a68e19014f2cf73a7f77ec6fc12c12c
  Leaf beb804f20541fc627fd77821a11a3d02
  Now 19aae6044cf44591930683cbda472505
  Stream 842b407b0b18370d0d7d6fdd47ddc27b
import  -/  Syntax.Booleans 2f5b0f6265d2d6e23f9e27da32119b5f
  exports: 71728b3a0c694557a14ef0fe375df96d
  && 7e6b9d4df7b120968a890a88a341cfce
  not 84b154f0cd561d6a4a5aa09dffe27593
  || d931c5612ab8b65bb21c53366fc02f9d
import  -/  Syntax.HLPrelude f80a67bea1d500b91e76dd8341487f94
  exports: 68fbd00b85e22e00f4229825fd729bf8
import  -/  Syntax.Ord 3abef8f6c923bbd6adef89f28a0cd4f8
  exports: ee3875b9880152641006c5630eff6401
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
8c2936638b8694a285ad1dde344a19d4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Lib.MITL.$trModule3
                   Lib.MITL.$trModule1) -}
0b76ad623f8ca6931202beb5fa14cae7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.MITL.$trModule2) -}
019a2d40e3eaf67e460d43952a831085
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib.MITL"#) -}
a6b05f920a4dfeaebaff6bba302c4bed
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.MITL.$trModule4) -}
8fd8afa822cbadfa096658e322cb021f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ"#) -}
d65464ceb8ecce38f7fe2fec7a848341
  $wandMITL ::
    Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: Lola.Stream GHC.Types.Bool)
                   (w1 :: Lola.Stream GHC.Types.Bool) ->
                 (# Lib.MITL.andMITL2
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N),
                    (GHC.CString.unpackAppendCString#
                       Lib.MITL.andMITL1
                       (GHC.Base.++_$s++
                          @ GHC.Types.Char
                          (GHC.Types.:
                             @ GHC.Types.Char
                             Lola.<:3
                             (case w1 of wild {
                                Lola.Input $dFromJSON $dRead $dTypeable ident
                                -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                Lola.Output $dTypeable ds1
                                -> case ds1 of wild1 { (,) ident ds2 ->
                                   GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                          Lola.<:3
                          (case w of wild {
                             Lola.Input $dFromJSON $dRead $dTypeable ident
                             -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                             Lola.Output $dTypeable ds1
                             -> case ds1 of wild1 { (,) ident ds2 ->
                                GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } })),
                     Lola.App
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       Syntax.Booleans.&&2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                       Syntax.Booleans.&&_$dTypeable1
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                          -> GHC.Types.Bool>_N)
                       Syntax.Booleans.&&2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                       (Lola.App
                          @ (GHC.Types.Bool -> GHC.Types.Bool)
                          @ GHC.Types.Bool
                          Syntax.Booleans.&&_$dTypeable1
                            `cast`
                          (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                             -> GHC.Types.Bool>_N)
                          Syntax.Booleans.&&_$dTypeable2
                            `cast`
                          (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                             -> GHC.Types.Bool
                                                                             -> GHC.Types.Bool>_N)
                          Syntax.Booleans.&&2
                            `cast`
                          (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                          Syntax.Booleans.&&1
                          (Lola.Now @ GHC.Types.Bool w))
                       (Lola.Now @ GHC.Types.Bool w1)) #)) -}
c09f5d904f4d91ecbfb6d2a793681692
  $weventuallyMITL ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: Lola.Stream GHC.Types.Bool) ->
                 (# Lib.MITL.andMITL2
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N),
                    (GHC.CString.unpackAppendCString#
                       Lib.MITL.eventuallyMITL4
                       (case ww of ww2 { GHC.Types.I# ww3 ->
                        case GHC.Show.$wshowSignedInt
                               0#
                               ww3
                               (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Base.++_$s++
                          @ GHC.Types.Char
                          (GHC.CString.unpackAppendCString#
                             Lib.MITL.eventuallyMITL3
                             (case ww1 of ww8 { GHC.Types.I# ww9 ->
                              case GHC.Show.$wshowSignedInt
                                     0#
                                     ww9
                                     (GHC.Types.[] @ GHC.Types.Char) of ww10 { (#,#) ww11 ww12 ->
                              GHC.Base.++_$s++
                                @ GHC.Types.Char
                                (GHC.CString.unpackAppendCString#
                                   Lib.MITL.eventuallyMITL2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      Lola.<:3
                                      (case w of wild {
                                         Lola.Input $dFromJSON $dRead $dTypeable ident
                                         -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                         Lola.Output $dTypeable ds1
                                         -> case ds1 of wild1 { (,) ident ds2 ->
                                            GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } })))
                                ww11
                                ww12 } }))
                          ww5
                          ww6 } }),
                     case ww of wild { GHC.Types.I# x ->
                     case ww1 of wild1 { GHC.Types.I# y ->
                     case GHC.Prim.># x y of lwild {
                       DEFAULT
                       -> let {
                            exit :: GHC.Prim.Int#
                                    -> Lola.Expr GHC.Types.Bool -> Lola.Expr GHC.Types.Bool
                              <join 2> {- Arity: 2, Strictness: <L,U><L,U> -}
                            = \ (x1 :: GHC.Prim.Int#)[OneShot]
                                (eta :: Lola.Expr GHC.Types.Bool)[OneShot] ->
                              Lola.App
                                @ GHC.Types.Bool
                                @ GHC.Types.Bool
                                Syntax.Booleans.&&2
                                  `cast`
                                (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                Syntax.Booleans.&&_$dTypeable1
                                  `cast`
                                (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                   -> GHC.Types.Bool>_N)
                                Syntax.Booleans.&&2
                                  `cast`
                                (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                (Lola.App
                                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   Syntax.Booleans.&&_$dTypeable1
                                     `cast`
                                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                      -> GHC.Types.Bool>_N)
                                   Syntax.Booleans.&&_$dTypeable2
                                     `cast`
                                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                      -> GHC.Types.Bool
                                                                                      -> GHC.Types.Bool>_N)
                                   Syntax.Booleans.&&2
                                     `cast`
                                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                   Syntax.Booleans.implies2
                                   eta)
                                (Lola.:@
                                   @ GHC.Types.Bool
                                   Lib.MITL.andMITL2
                                     `cast`
                                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                   w
                                   (GHC.Types.I# x1, GHC.Types.False))
                          } in
                          letrec {
                            go :: GHC.Prim.Int#
                                  -> Lola.Expr GHC.Types.Bool -> Lola.Expr GHC.Types.Bool
                              <join 2> {- Arity: 2, Strictness: <S,U><L,U> -}
                            = \ (x1 :: GHC.Prim.Int#) (eta :: Lola.Expr GHC.Types.Bool) ->
                              case GHC.Prim.==# x1 y of lwild1 {
                                DEFAULT
                                -> go
                                     (GHC.Prim.+# x1 1#)
                                     (Lola.App
                                        @ GHC.Types.Bool
                                        @ GHC.Types.Bool
                                        Syntax.Booleans.&&2
                                          `cast`
                                        (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                        Syntax.Booleans.&&_$dTypeable1
                                          `cast`
                                        (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                           -> GHC.Types.Bool>_N)
                                        Syntax.Booleans.&&2
                                          `cast`
                                        (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                        (Lola.App
                                           @ (GHC.Types.Bool -> GHC.Types.Bool)
                                           @ GHC.Types.Bool
                                           Syntax.Booleans.&&_$dTypeable1
                                             `cast`
                                           (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                              -> GHC.Types.Bool>_N)
                                           Syntax.Booleans.&&_$dTypeable2
                                             `cast`
                                           (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                                              -> GHC.Types.Bool
                                                                                              -> GHC.Types.Bool>_N)
                                           Syntax.Booleans.&&2
                                             `cast`
                                           (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                           Syntax.Booleans.implies2
                                           eta)
                                        (Lola.:@
                                           @ GHC.Types.Bool
                                           Lib.MITL.andMITL2
                                             `cast`
                                           (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                                           w
                                           (GHC.Types.I# x1, GHC.Types.False)))
                                1# -> exit x1 eta }
                          } in
                          go x Lib.MITL.eventuallyMITL1
                       1# -> Lib.MITL.eventuallyMITL1 } } }) #)) -}
6d56d07991669d471cb93543a9e73a7c
  $wnotMITL ::
    Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: Lola.Stream GHC.Types.Bool) ->
                 (# Lib.MITL.andMITL2
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N),
                    (GHC.CString.unpackAppendCString#
                       Lib.MITL.notMITL1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          Lola.<:3
                          (case w of wild {
                             Lola.Input $dFromJSON $dRead $dTypeable ident
                             -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                             Lola.Output $dTypeable ds1
                             -> case ds1 of wild1 { (,) ident ds2 ->
                                GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } })),
                     Lola.App
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       Syntax.Booleans.&&2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                       Syntax.Booleans.&&_$dTypeable1
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool
                                                                          -> GHC.Types.Bool>_N)
                       Syntax.Booleans.&&2
                         `cast`
                       (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                       Syntax.Booleans.implies1
                       (Lola.Now @ GHC.Types.Bool w)) #)) -}
fe55395aec8d272ac875cfbf515e2132
  $wuntil' ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Bool
  {- Arity: 4, Strictness: <S,U><S,U><L,U><L,U>, Inline: [2] -}
c79fd9fc6c0c1686b6aec3b2d1dfdea4
  $wuntilMITL ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: Lola.Stream GHC.Types.Bool)
                   (w1 :: Lola.Stream GHC.Types.Bool) ->
                 (# Lib.MITL.andMITL2
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N),
                    (GHC.CString.unpackAppendCString#
                       Lib.MITL.untilMITL1
                       (case ww of ww2 { GHC.Types.I# ww3 ->
                        case GHC.Show.$wshowSignedInt
                               0#
                               ww3
                               (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Base.++_$s++
                          @ GHC.Types.Char
                          (GHC.CString.unpackAppendCString#
                             Lib.MITL.eventuallyMITL3
                             (case ww1 of ww8 { GHC.Types.I# ww9 ->
                              case GHC.Show.$wshowSignedInt
                                     0#
                                     ww9
                                     (GHC.Types.[] @ GHC.Types.Char) of ww10 { (#,#) ww11 ww12 ->
                              GHC.Base.++_$s++
                                @ GHC.Types.Char
                                (GHC.CString.unpackAppendCString#
                                   Lib.MITL.eventuallyMITL2
                                   (GHC.Base.++_$s++
                                      @ GHC.Types.Char
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         Lola.<:3
                                         (case w1 of wild {
                                            Lola.Input $dFromJSON $dRead $dTypeable ident
                                            -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                            Lola.Output $dTypeable ds1
                                            -> case ds1 of wild1 { (,) ident ds2 ->
                                               GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                                      Lola.<:3
                                      (case w of wild {
                                         Lola.Input $dFromJSON $dRead $dTypeable ident
                                         -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                         Lola.Output $dTypeable ds1
                                         -> case ds1 of wild1 { (,) ident ds2 ->
                                            GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } })))
                                ww11
                                ww12 } }))
                          ww5
                          ww6 } }),
                     Lib.MITL.until' ww ww1 w w1) #)) -}
5cae6b58259870fea47080a2e2b99875
  andMITL ::
    Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool -> Lola.Stream GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lola.Stream GHC.Types.Bool)
                   (w1 :: Lola.Stream GHC.Types.Bool) ->
                 case Lib.MITL.$wandMITL w w1 of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Bool ww1 ww2 }) -}
c230e2eceacb2b84571806b885436609
  andMITL1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("and"#) -}
3e6d060c787c143b9b77d5d17faf32e9
  andMITL2 :: Data.Typeable.Internal.TypeRep GHC.Types.Bool
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Bool
                        14182099612280475667##
                        2734577064602454082##
                        GHC.Types.$trModule
                        GHC.Types.$tcBool1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ GHC.Types.Bool
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
64f21472ca4008520a10a72188a58722
  eventuallyMITL ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Lola.Stream GHC.Types.Bool -> Lola.Stream GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U(U),U(U))><L,U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: Lola.Stream GHC.Types.Bool) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Lib.MITL.$weventuallyMITL ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Lola.Output @ GHC.Types.Bool ww4 ww5 } }) -}
d000551fdc8d7d6d99afdb7454f157d7
  eventuallyMITL1 :: Lola.Expr GHC.Types.Bool
  {- Strictness: m1,
     Unfolding: (Lola.Leaf
                   @ GHC.Types.Bool
                   Lib.MITL.andMITL2
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   GHC.Types.False) -}
ee7812495150f460a7fbcbbc534895b9
  eventuallyMITL2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
c6c9584abf5fdd5895b8b1fab2a55a13
  eventuallyMITL3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
7b2083fe3dd2d0ad8366c5046b3583bf
  eventuallyMITL4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eventually_("#) -}
ddcd8db987eeea3f7a756f86dba1afed
  notMITL :: Lola.Stream GHC.Types.Bool -> Lola.Stream GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lola.Stream GHC.Types.Bool) ->
                 case Lib.MITL.$wnotMITL w of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Bool ww1 ww2 }) -}
85748bea803020305d964c56632dc966
  notMITL1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not"#) -}
ee56d2ac540d4526dcb61d2375ad5d65
  until' ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Bool
  {- Arity: 4, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Lola.Declaration GHC.Types.Bool)
                   (w3 :: Lola.Declaration GHC.Types.Bool) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lib.MITL.$wuntil' ww1 ww3 w2 w3 } }) -}
a3138728d5468af75b886326126ae6ab
  untilMITL ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
  {- Arity: 3, Strictness: <S,1*U(U(U),U(U))><L,U><L,U>m2,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Lib.MITL.$wuntilMITL ww1 ww2 w1 w2 of ww3 { (#,#) ww4 ww5 ->
                 Lola.Output @ GHC.Types.Bool ww4 ww5 } }) -}
d8d6b5597eeb24ca39d7eaadc8150276
  untilMITL1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("until_("#) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

