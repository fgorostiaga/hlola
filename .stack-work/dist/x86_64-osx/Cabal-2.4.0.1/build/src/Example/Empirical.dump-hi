
==================== FINAL INTERFACE ====================
2019-10-21 10:04:17.102424 UTC

interface HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Example.Empirical 8065
  interface hash: f514540ef49d36b5464df693cf3fea72
  ABI hash: 098ca686efb6469e7b066cb050989067
  export-list hash: f4eaed31015cb4daa4781c8fa1e54502
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d5bd55554af082500bdbbcdfa34dcc60
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Example.Empirical.getSpec
  Example.Empirical.p
  Example.Empirical.q
  Example.Empirical.qsince
  Example.Empirical.qsince2
  Example.Empirical.since
  Example.Empirical.since2
  Example.Empirical.spec
  Example.Empirical.TestType{Example.Empirical.QSince1 Example.Empirical.QSince12 Example.Empirical.QSince2 Example.Empirical.Since1 Example.Empirical.Since12 Example.Empirical.Since2}
module dependencies: DecDyn Lola Syntax.Booleans Syntax.HLPrelude
                     Syntax.Num
package dependencies: aeson-1.4.5.0 array-0.5.3.0
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 binary-0.8.6.0 bytestring-0.10.8.2
                      containers-0.6.0.1 deepseq-1.4.4.0 dlist-0.8.0.7 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 primitive-0.6.4.0 random-1.1
                      scientific-0.3.6.2 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-compat-1.9.2.2 transformers-0.5.6.2
                      unordered-containers-0.2.10.0 uuid-types-1.0.3 vector-0.12.0.3
orphans: HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Syntax.Num
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.5.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.7:Data.DList ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  DecDyn e44279c7ab4d42b81c75c5ed2ac16b6e
  exports: 040c7148a7a3f91e612a4e6a8a65bbcb
  Specification 8ccdcd2b29287a77dbf01dead617648f
  out fce5654af84855f268138b5525329c31
import  -/  Lola f52d080a9c6c535055cc2d321870899c
  exports: f0b2b11faceeef480fb3969a0b54aac2
  :@ 0e91454cfe22ab22364b2d071c8db005
  <$> 5dbf6fc938f9b138f5c32cf20fb73d22
  <: ede31a85d24f5fc58211abc6c1cf47eb
  =: 8a68e19014f2cf73a7f77ec6fc12c12c
  Input 84bbb625cf5c7ec015044d911c3c39d7
  Leaf beb804f20541fc627fd77821a11a3d02
  Now 19aae6044cf44591930683cbda472505
  Stream 842b407b0b18370d0d7d6fdd47ddc27b
import  -/  Syntax.Booleans 2f5b0f6265d2d6e23f9e27da32119b5f
  exports: 71728b3a0c694557a14ef0fe375df96d
  && 7e6b9d4df7b120968a890a88a341cfce
  || d931c5612ab8b65bb21c53366fc02f9d
import  -/  Syntax.HLPrelude f80a67bea1d500b91e76dd8341487f94
  exports: 68fbd00b85e22e00f4229825fd729bf8
import  -/  Syntax.Num 42d53dc12ffc226b88f55b096d15fb83
  exports: 883071c53baa629578d78c5289d88073
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Read 0604f4258fedea7e033ea68c6d7b40f2
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType :: GHC.Read.Read Example.Empirical.TestType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Example.Empirical.TestType
                  Example.Empirical.$fReadTestType_$creadsPrec
                  Example.Empirical.$fReadTestType_$creadList
                  Example.Empirical.$fReadTestType1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R))
                  Example.Empirical.$fReadTestType_$creadListPrec -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ Example.Empirical.TestType
                   Example.Empirical.$fReadTestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Example.Empirical.TestType>_R))) -}
b97b9ea6800beb64843448419a9940c9
  $fReadTestType10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType11) -}
8e2fdad93cc946d65b7635426236642f
  $fReadTestType11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QSince12"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType14,
                  Example.Empirical.$fReadTestType13
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.QSince2) -}
d84a1e11e7faf6c79e630dc2a4c4e77d
  $fReadTestType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType15) -}
eee98ed4d3265393f61379ff83338fb2
  $fReadTestType15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QSince2"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType18,
                  Example.Empirical.$fReadTestType17
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.QSince1) -}
e44be43d4f61d475271a8350fae9c730
  $fReadTestType18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType19) -}
426ba7d7186af38066fa2c35a4645562
  $fReadTestType19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QSince1"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Example.Empirical.TestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ Example.Empirical.TestType
                   Example.Empirical.$fReadTestType_sps
                   eta) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType22,
                  Example.Empirical.$fReadTestType21
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.Since12) -}
daebc7903e491ed21774a9c293f48b31
  $fReadTestType22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType23) -}
a5fb64f5be43e9298a43227ea42a5b49
  $fReadTestType23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Since12"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType26,
                  Example.Empirical.$fReadTestType25
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.Since2) -}
e65cd8a034497fd6eb93bd018c10fca8
  $fReadTestType26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType27) -}
4539ed57c3932453c864d905a2b75f68
  $fReadTestType27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Since2"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType30,
                  Example.Empirical.$fReadTestType29
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.Since1) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType3 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType24
                   Example.Empirical.$fReadTestType4) -}
3bd65e80f8d0d950000de64c4ce30469
  $fReadTestType30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Example.Empirical.$fReadTestType31) -}
b09229be9cc573059c5a57a83d32803f
  $fReadTestType31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Since1"#) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType32 ::
    Text.ParserCombinators.ReadP.P [Example.Empirical.TestType]
  {- Unfolding: ((Example.Empirical.$fReadTestType_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[Example.Empirical.TestType]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[Example.Empirical.TestType]>_R)
                   @ [Example.Empirical.TestType]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Example.Empirical.TestType])) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType20
                   Example.Empirical.$fReadTestType5) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType16
                   Example.Empirical.$fReadTestType6) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType12
                   Example.Empirical.$fReadTestType7) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Example.Empirical.TestType))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       Example.Empirical.TestType)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.$fReadTestType10,
                  Example.Empirical.$fReadTestType9
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                              <Example.Empirical.TestType>_R)))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Example.Empirical.TestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k1 :: Example.Empirical.TestType
                          -> Text.ParserCombinators.ReadP.P b) ->
                 k1 Example.Empirical.QSince12) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Example.Empirical.TestType]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Example.Empirical.TestType]
                   Example.Empirical.$fReadTestType32) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Example.Empirical.TestType]
  {- Unfolding: (GHC.Read.list
                   @ Example.Empirical.TestType
                   Example.Empirical.$fReadTestType1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Example.Empirical.TestType>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                               <Example.Empirical.TestType>_R))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Example.Empirical.TestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Example.Empirical.TestType
                   (GHC.Read.$fRead()6
                      @ Example.Empirical.TestType
                      Example.Empirical.$fReadTestType2
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <Example.Empirical.TestType>_R))
                      n
                      @ Example.Empirical.TestType
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Example.Empirical.TestType))) -}
cb39f409030d77013dd13d1c22316d7f
  $fReadTestType_sps ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        Example.Empirical.TestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        Example.Empirical.TestType)
                   Example.Empirical.$fReadTestType28
                   Example.Empirical.$fReadTestType3) -}
cd2947fb702e1a74f23910e1cf385c95
  $sdec2Dyn1 :: Data.Typeable.Internal.TypeRep GHC.Types.Bool
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Bool
                        14182099612280475667##
                        2734577064602454082##
                        GHC.Types.$trModule
                        GHC.Types.$tcBool1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ GHC.Types.Bool
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
00ac88f3be6d12e2be849ba2e221ff99
  $sdec2Dyn3 :: Data.Typeable.Internal.TypeRep GHC.Types.Int
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Int
                        5193196903533114208##
                        8143820745237564347##
                        GHC.Types.$trModule
                        GHC.Types.$tcInt1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ GHC.Types.Int
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
74f3d6c46d7631cf1a48e0a29d145296
  $tc'QSince1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12215588804218282898##
                   3457599491234632911##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'QSince5
                   0#
                   Example.Empirical.$tc'QSince4) -}
401e6ff15a9cf9a89e66eaedd0547336
  $tc'QSince10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QSince2"#) -}
e0fcf7995aa7d3ca6a735020fd8c73a0
  $tc'QSince12 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12517711305367084452##
                   16935271011795251270##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'QSince7
                   0#
                   Example.Empirical.$tc'QSince4) -}
761099c08e737bc00fc37342811e37df
  $tc'QSince2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17983743606932061280##
                   4517013220755383597##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'QSince9
                   0#
                   Example.Empirical.$tc'QSince4) -}
ba5be05da550657002e9c593aeeeed23
  $tc'QSince4 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
2ec335943d848ce487df8a635c9f377b
  $tc'QSince5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'QSince6) -}
4d02c78d9be44a84be929f8533931a2a
  $tc'QSince6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QSince1"#) -}
59acf053f0d3c0ff2e8b1cc66e3d276c
  $tc'QSince7 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'QSince8) -}
a08e7bca1c25550054f4dd86ff774fc5
  $tc'QSince8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QSince12"#) -}
883734ea86d50fe4b5a1373263732a10
  $tc'QSince9 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'QSince10) -}
9a2d8662543708aeb8d84fc9eef0e5c6
  $tc'Since1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12830074285331440579##
                   3421614680223972630##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'Since4
                   0#
                   Example.Empirical.$tc'QSince4) -}
30d710290216a7b66a584995307b9cf3
  $tc'Since12 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13301181875191709024##
                   9096614161648710007##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'Since6
                   0#
                   Example.Empirical.$tc'QSince4) -}
25be1421562b7d188ef0f678643ec7a5
  $tc'Since2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17812485243886604366##
                   10957432720705194746##
                   Example.Empirical.$trModule
                   Example.Empirical.$tc'Since8
                   0#
                   Example.Empirical.$tc'QSince4) -}
5e2012fcb9c5ec537dfd5a776302faa6
  $tc'Since4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'Since5) -}
b7971064271e62428aa64a5314e51955
  $tc'Since5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Since1"#) -}
9eccd78102ffef52fd6918c101a48e15
  $tc'Since6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'Since7) -}
30be60ad6deb1c6ebe44b0d0d6b2738e
  $tc'Since7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Since12"#) -}
b85349ba2d6beab26923db6c51d29e12
  $tc'Since8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tc'Since9) -}
e7f7e8292b496dbe97a6510566354672
  $tc'Since9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Since2"#) -}
bcadef40537a87ff1ada96bdc46cb04b
  $tcTestType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4067192311633439824##
                   14885655817990873855##
                   Example.Empirical.$trModule
                   Example.Empirical.$tcTestType1
                   0#
                   GHC.Types.krep$*) -}
af3c8a1faf827ca605643c8bebcb0b2d
  $tcTestType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$tcTestType2) -}
ed2851146541248e75957bef430b23b1
  $tcTestType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TestType"#) -}
7c791274720e12f1e7947bfa13553e55
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Example.Empirical.$trModule3
                   Example.Empirical.$trModule1) -}
a803c0dfd59d92693b48bc6cb0836c46
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$trModule2) -}
34e185bc923d4105144fe7afc97507fd
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Example.Empirical"#) -}
d83649f7d72d5b90a62853bd89be630b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Example.Empirical.$trModule4) -}
ac0b277378a1b520be0a473b74a68bdf
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ"#) -}
4c2136144a43052ed5d7ce24b850bddf
  $wgetSpec ::
    Example.Empirical.TestType
    -> GHC.Types.Int -> (# DecDyn.DecDyn, [DecDyn.DecDyn] #)
  {- Arity: 2, Strictness: <L,1*U><L,U(U)>, Inline: [2] -}
cf11630937dbdf8886f4e42398f2261f
  $wqsince ::
    GHC.Prim.Int#
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Int,
          (Lola.Ident, Lola.Expr GHC.Types.Int) #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
9b5cdbc5424e5a0aee24d28eba5a7bf7
  $wqsince2 ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Int,
          (Lola.Ident, Lola.Expr GHC.Types.Int) #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 (# Example.Empirical.$sdec2Dyn3
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Int>_N),
                    (GHC.CString.unpackAppendCString#
                       Example.Empirical.qsince1
                       (GHC.Base.++_$s++
                          @ GHC.Types.Char
                          (GHC.Base.++_$s++
                             @ GHC.Types.Char
                             (GHC.Types.:
                                @ GHC.Types.Char
                                Lola.<:3
                                (case w2 of wild {
                                   Lola.Input $dFromJSON $dRead $dTypeable ident
                                   -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                   Lola.Output $dTypeable ds1
                                   -> case ds1 of wild1 { (,) ident ds2 ->
                                      GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                             Lola.<:3
                             (case w1 of wild {
                                Lola.Input $dFromJSON $dRead $dTypeable ident
                                -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                Lola.Output $dTypeable ds1
                                -> case ds1 of wild1 { (,) ident ds2 ->
                                   GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                          Lola.<:3
                          (case w of ww2 { GHC.Types.I# ww3 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww3
                                  (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                           GHC.Base.++_$s++ @ GHC.Types.Char Lola.<:1 ww5 ww6 } })),
                     Example.Empirical.qsince2_qsince2expr w w1 w2) #)) -}
861043401739a6ae8e3ca069bb6e47bd
  $wqsince2expr ::
    GHC.Prim.Int#
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
08fd58429088af2ddd8b81c999383514
  $wsince ::
    GHC.Prim.Int#
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
56f4fa1924b730d148e2d589af3e6c76
  $wsince2 ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> (# Lola.Streamable GHC.Types.Bool,
          (Lola.Ident, Lola.Expr GHC.Types.Bool) #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 (# Example.Empirical.$sdec2Dyn1
                      `cast`
                    (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N),
                    (GHC.CString.unpackAppendCString#
                       Example.Empirical.since1
                       (GHC.Base.++_$s++
                          @ GHC.Types.Char
                          (GHC.Base.++_$s++
                             @ GHC.Types.Char
                             (GHC.Types.:
                                @ GHC.Types.Char
                                Lola.<:3
                                (case w2 of wild {
                                   Lola.Input $dFromJSON $dRead $dTypeable ident
                                   -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                   Lola.Output $dTypeable ds1
                                   -> case ds1 of wild1 { (,) ident ds2 ->
                                      GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                             Lola.<:3
                             (case w1 of wild {
                                Lola.Input $dFromJSON $dRead $dTypeable ident
                                -> GHC.Base.++ @ GHC.Types.Char ident Lola.<:1
                                Lola.Output $dTypeable ds1
                                -> case ds1 of wild1 { (,) ident ds2 ->
                                   GHC.Base.++ @ GHC.Types.Char ident Lola.<:1 } }))
                          Lola.<:3
                          (case w of ww2 { GHC.Types.I# ww3 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww3
                                  (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                           GHC.Base.++_$s++ @ GHC.Types.Char Lola.<:1 ww5 ww6 } })),
                     Example.Empirical.since2_since2expr w w1 w2) #)) -}
2608e25a943dd4438654a9a89d75c0b5
  $wsince2expr ::
    GHC.Prim.Int#
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Bool
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
cb39f409030d77013dd13d1c22316d7f
  data TestType
    = Since1 | Since2 | Since12 | QSince1 | QSince2 | QSince12
6cd5a1157bd3619af4a0dc3a529ae0b8
  getSpec ::
    (Example.Empirical.TestType, GHC.Types.Int) -> DecDyn.Specification
  {- Arity: 1, Strictness: <S,1*U(1*U,U(U))>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Example.Empirical.TestType, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Example.Empirical.$wgetSpec ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ DecDyn.DecDyn ww4 ww5 } }) -}
dd05a57e6b63be1994be6c2d23e7e695
  p :: Lola.Declaration GHC.Types.Bool
  {- Strictness: m1,
     Unfolding: (Lola.Input
                   @ GHC.Types.Bool
                   Data.Aeson.Types.FromJSON.$fFromJSONBool
                   GHC.Read.$fReadBool
                   Example.Empirical.$sdec2Dyn1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   Example.Empirical.p1) -}
056c95083f848114a188353e1199f681
  p1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Example.Empirical.p2) -}
6ceddd4ed03945cfbf078bc7e2dd8ba1
  p2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p"#) -}
fd116be66847b177dd2697147aaaf2a8
  q :: Lola.Declaration GHC.Types.Bool
  {- Strictness: m1,
     Unfolding: (Lola.Input
                   @ GHC.Types.Bool
                   Data.Aeson.Types.FromJSON.$fFromJSONBool
                   GHC.Read.$fReadBool
                   Example.Empirical.$sdec2Dyn1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                   Example.Empirical.q1) -}
dafc82f8164041c769e537732dcd7a85
  q1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Example.Empirical.q2) -}
4d2ba2cb30cbf14a11510907831a7d53
  q2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("q"#) -}
c797835125a35b703d30810d730ae684
  qsince ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Int
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Example.Empirical.$wqsince ww1 w1 w2 of ww2 { (#,#) ww3 ww4 ->
                 Lola.Output @ GHC.Types.Int ww3 ww4 } }) -}
cb8fbfb3d3bb80f50515083527c4e431
  qsince1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("qsince2"#) -}
9e9951a38c3da5c1509b8abb98a0c425
  qsince2 ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Int
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 case Example.Empirical.$wqsince2 w w1 w2 of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Int ww1 ww2 }) -}
f7b9f66fe9da6f9f48b6f6ea4e91916e
  qsince2_qsince2expr ::
    GHC.Types.Int
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Int
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Declaration GHC.Types.Bool)
                   (w2 :: Lola.Declaration GHC.Types.Bool) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Example.Empirical.$wqsince2expr ww1 w1 w2 }) -}
21184fd1d67d80d3d0ce4b43bfd7aac7
  since ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Example.Empirical.$wsince ww1 w1 w2 of ww2 { (#,#) ww3 ww4 ->
                 Lola.Output @ GHC.Types.Bool ww3 ww4 } }) -}
4f29c8532bd203d8c00ed6110d60220e
  since1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("since2"#) -}
cce7a083060dae16afec8651613b8f63
  since2 ::
    GHC.Types.Int
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
    -> Lola.Stream GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Stream GHC.Types.Bool)
                   (w2 :: Lola.Stream GHC.Types.Bool) ->
                 case Example.Empirical.$wsince2 w w1 w2 of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Bool ww1 ww2 }) -}
a3fd6c7b16437d3d2cc310cbe225f577
  since2_since2expr ::
    GHC.Types.Int
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Declaration GHC.Types.Bool
    -> Lola.Expr GHC.Types.Bool
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lola.Declaration GHC.Types.Bool)
                   (w2 :: Lola.Declaration GHC.Types.Bool) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Example.Empirical.$wsince2expr ww1 w1 w2 }) -}
04bbd618bf2964beec5d2b588a85918e
  spec :: DecDyn.Specification
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ DecDyn.DecDyn
                   Example.Empirical.spec16
                   Example.Empirical.spec1) -}
830994a9a23be9927d05ec33b8223853
  spec1 :: [DecDyn.DecDyn]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ DecDyn.DecDyn
                   Example.Empirical.spec9
                   Example.Empirical.spec2) -}
fa2e7d4aa697b6be6aaf567a6793f39b
  spec10 :: DecDyn.FromJSONers
  {- Unfolding: (case Example.Empirical.spec_ds of wild { (,,) ed thereaders thejsoners ->
                 thejsoners }) -}
c379a5e6b7988c4b09cbb2bdae51cb06
  spec11 :: DecDyn.Readers
  {- Unfolding: (case Example.Empirical.spec_ds of wild { (,,) ed thereaders thejsoners ->
                 thereaders }) -}
b843e0d1fdbae01d7303dffa03c56dd5
  spec12 ::
    (Data.Dynamic.Dynamic -> GHC.Base.String,
     Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.spec14,
                  Example.Empirical.spec13)) -}
fa0c8c97c43fa3b1aad93c6fc61cad9b
  spec13 :: Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Dynamic.Dynamic) ->
                 case x of wild { Data.Dynamic.Dynamic a1 t v ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ a1
                        @ GHC.Types.Bool
                        t
                        Example.Empirical.$sdec2Dyn1 of wild1 {
                   GHC.Types.False
                   -> case Data.Maybe.fromJust1
                      ret_ty Data.Aeson.Types.Internal.Value
                      of {}
                   GHC.Types.True
                   -> case v `cast`
                           (UnsafeCo representational a1 GHC.Types.Bool) of dt { DEFAULT ->
                      Data.Aeson.Types.Internal.Bool dt } } }) -}
33624c8da1bc01de2c84b1a6ad761f89
  spec14 :: Data.Dynamic.Dynamic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Dynamic.Dynamic) ->
                 case x of wild { Data.Dynamic.Dynamic a1 t v ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ a1
                        @ GHC.Types.Bool
                        t
                        Example.Empirical.$sdec2Dyn1 of wild1 {
                   GHC.Types.False
                   -> case Data.Maybe.fromJust1 ret_ty GHC.Base.String of {}
                   GHC.Types.True
                   -> case v `cast`
                           (UnsafeCo representational a1 GHC.Types.Bool) of wild2 {
                        GHC.Types.False -> GHC.Show.$fShowBool4
                        GHC.Types.True -> GHC.Show.$fShowBool2 } } }) -}
ad58e28dda9df628ecf4a11b873f30c5
  spec15 :: DecDyn.DeclarationDyn
  {- Unfolding: (case Example.Empirical.spec_ds of wild { (,,) ed thereaders thejsoners ->
                 ed }) -}
1c00ca812742a4b97427fbfdab907e7b
  spec16 ::
    (DecDyn.DeclarationDyn,
     (Data.Dynamic.Dynamic -> GHC.Base.String,
      Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
     DecDyn.Readers, DecDyn.FromJSONers)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.spec19, Example.Empirical.spec12,
                  Example.Empirical.spec18, Example.Empirical.spec17)) -}
f6d279ee5ecbba306d43c8a0ba31324b
  spec17 :: DecDyn.FromJSONers
  {- Unfolding: (case Example.Empirical.spec_ds1 of wild { (,,) ed thereaders thejsoners ->
                 thejsoners }) -}
9257abcf9353e4ae09b804c29675bd75
  spec18 :: DecDyn.Readers
  {- Unfolding: (case Example.Empirical.spec_ds1 of wild { (,,) ed thereaders thejsoners ->
                 thereaders }) -}
2d548fb2be01500ee0ebbab14db0dd97
  spec19 :: DecDyn.DeclarationDyn
  {- Unfolding: (case Example.Empirical.spec_ds1 of wild { (,,) ed thereaders thejsoners ->
                 ed }) -}
f1ce962de6ad40646bd24166594e5912
  spec2 :: [DecDyn.DecDyn]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ DecDyn.DecDyn
                   Example.Empirical.spec7
                   Example.Empirical.spec3) -}
6752e1619da3c22233bbd5f706b95c4f
  spec3 :: [DecDyn.DecDyn]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ DecDyn.DecDyn
                   Example.Empirical.spec4
                   (GHC.Types.[] @ DecDyn.DecDyn)) -}
85ef60a12cecbd2faac0235d0b133a42
  spec4 :: DecDyn.DecDyn
  {- Unfolding: (case DecDyn.$wdec2Dyn
                        @ GHC.Types.Bool
                        Example.Empirical.$sdec2Dyn1
                          `cast`
                        (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                        GHC.Show.$fShowBool
                        Data.Aeson.Types.ToJSON.$fToJSONBool
                        Example.Empirical.spec5 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 (ww1, ww2, ww3, ww4) }) -}
dda8f5cb47e9208c0aeb0e9be596ae97
  spec5 :: Lola.Declaration GHC.Types.Bool
  {- Unfolding: (case Example.Empirical.$wsince2
                        Example.Empirical.spec6
                        Example.Empirical.p
                        Example.Empirical.q of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Bool ww1 ww2 }) -}
1355c3bbf9bfe1c55e115d7fb9673bb3
  spec6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
cfe9749ab593a678d194c1ad666d6fdb
  spec7 :: DecDyn.DecDyn
  {- Unfolding: (case DecDyn.$wdec2Dyn
                        @ GHC.Types.Bool
                        Example.Empirical.$sdec2Dyn1
                          `cast`
                        (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <GHC.Types.Bool>_N)
                        GHC.Show.$fShowBool
                        Data.Aeson.Types.ToJSON.$fToJSONBool
                        Example.Empirical.spec8 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 (ww1, ww2, ww3, ww4) }) -}
4b12bdc3d27ce37f22c5d7f2e4bb37b0
  spec8 :: Lola.Declaration GHC.Types.Bool
  {- Unfolding: (case Example.Empirical.$wsince
                        5#
                        Example.Empirical.p
                        Example.Empirical.q of ww { (#,#) ww1 ww2 ->
                 Lola.Output @ GHC.Types.Bool ww1 ww2 }) -}
3f8b91dfef9b7037d3f95daa3b3cab36
  spec9 ::
    (DecDyn.DeclarationDyn,
     (Data.Dynamic.Dynamic -> GHC.Base.String,
      Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
     DecDyn.Readers, DecDyn.FromJSONers)
  {- Strictness: m,
     Unfolding: ((Example.Empirical.spec15, Example.Empirical.spec12,
                  Example.Empirical.spec11, Example.Empirical.spec10)) -}
c1c93824494c4a6d7bc82845e85796b7
  spec_ds ::
    (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers)
  {- Unfolding: (DecDyn.$sfind1
                   @ (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers)
                   Example.Empirical.q1
                   (DecDyn.dec2Dyn'
                      @ GHC.Types.Bool
                      (Data.Map.Internal.Tip
                         @ Lola.Ident
                         @ (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers))
                      Example.Empirical.q)) -}
7bac2ed4d09116efba25212055692ec5
  spec_ds1 ::
    (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers)
  {- Unfolding: (DecDyn.$sfind1
                   @ (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers)
                   Example.Empirical.p1
                   (DecDyn.dec2Dyn'
                      @ GHC.Types.Bool
                      (Data.Map.Internal.Tip
                         @ Lola.Ident
                         @ (DecDyn.DeclarationDyn, DecDyn.Readers, DecDyn.FromJSONers))
                      Example.Empirical.p)) -}
instance GHC.Read.Read [Example.Empirical.TestType]
  = Example.Empirical.$fReadTestType
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

