
==================== FINAL INTERFACE ====================
2019-10-21 10:04:13.71056 UTC

interface HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Engine.Engine 8065
  interface hash: 5c09619db6ee5821194e793daa4ca7ae
  ABI hash: c103f4c6235ee1aa973ee1956288e946
  export-list hash: a4d9931e51355277d920a882c949b166
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 152fc13024de91493cf12aeed6735708
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Engine.Engine.addDec
  Engine.Engine.addExp
  Engine.Engine.getOutExprs
  Engine.Engine.getSystem
  Engine.Engine.printFocus
  Engine.Engine.procAndPrint
  Engine.Engine.rshift'
  Engine.Engine.run
  Engine.Engine.showCSVRow
  Engine.Engine.showDebug
  Engine.Engine.solve
  Engine.Engine.solveFocus
  Engine.Engine.solveTop
  Engine.Engine.DebugInfo
  Engine.Engine.Instant
  Engine.Engine.Sys
module dependencies: DecDyn Engine.Focus Lola StaticAnalysis
package dependencies: MissingH-1.4.1.0 aeson-1.4.5.0 array-0.5.3.0
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 binary-0.8.6.0 bytestring-0.10.8.2
                      containers-0.6.0.1 deepseq-1.4.4.0 dlist-0.8.0.7 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 primitive-0.6.4.0 random-1.1
                      scientific-0.3.6.2 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-compat-1.9.2.2 transformers-0.5.6.2
                      unordered-containers-0.2.10.0 uuid-types-1.0.3 vector-0.12.0.3
orphans: attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.5.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.7:Data.DList ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  DecDyn e44279c7ab4d42b81c75c5ed2ac16b6e
  exports: 040c7148a7a3f91e612a4e6a8a65bbcb
  CSV 02aa41100a26d4df7b2dec7bff906b04
  DApp 509eae2b90a80f580031a56e4660a52f
  DAt 2e05422235b735273e8103cfe48440f1
  DInp 683ff51ddc6bb4b2d0996312e50cfd2c
  DLeaf dc2b02c132cbe15beaae3576bfa6cb56
  DNow fd3053ed7917c133f76c25ba317c9bac
  DOut d9444b69e37e4252fdd69500bc7f868a
  DeclarationDyn 1965aa6f1af02783601d880422aeb48a
  ExprDyn 1965aa6f1af02783601d880422aeb48a
  Format ecae1250810799f9368cb3bd439442ed
  Specification 8ccdcd2b29287a77dbf01dead617648f
  dgetId 75e4e37aa42d35b959226c4f1c2fcfb5
  fst4 5560085e9fff1242c6fecdb994f96503
  snd4 fc5b1bf62e0f94eb6f5a03dc9230705e
import  -/  Engine.Focus 99328e13d216e25861824102ee6077a6
  exports: 1b285650392cd65ec48e56be41a29513
  Focus 9b75e07cb56848483a26911fac158b3a
  Focus a25328992323c262b49d31b1c7d36951
  emptyPast 0f385e15ed993ce21447aaff3ebc069b
  shiftN 19cabc28c325d2445e2ffe999e589701
import  -/  Lola f52d080a9c6c535055cc2d321870899c
  exports: f0b2b11faceeef480fb3969a0b54aac2
  Ident e64c21a7ccd45786c76649982d91fabe
import  -/  StaticAnalysis f1332da07e201138a155bb13e241249a
  exports: 3e17719552d37bcfa24fd3a666e899ba
  Vert 40fc7b30d5b2be0b6c82919158c99acd
  checkGraph 8612eb3ed828532ecfd62b99f8c66674
  dotFromGraph 7671d4400d3c6e50a31bbbddfaa70ff6
  getFGraph 8e07c340fdc3da799a39da82922f1228
import  -/  MissingH-1.4.1.0:Data.Tuple.Utils 3a98f5f566d89722b9b3701b28f410cf
import  -/  aeson-1.4.5.0:Data.Aeson cd1e38ad278b969589c5b1ad8a30af94
import  -/  aeson-1.4.5.0:Data.Aeson.Types.Internal caabc335ba2ec9f5ac75514abf283619
import  -/  base-4.12.0.0:Data.Dynamic ef74395f5e02d1f1b1dbed7092c8bd30
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:Data.Tuple c719fc29608fe81c10bee9a1bf1e05ff
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Char8 ee271bbed336425979c30600663f1b4d
import  -/  containers-0.6.0.1:Data.Map.Internal 9e74e122af4fa0c1b8d4c844eeda9c98
import  -/  containers-0.6.0.1:Data.Map.Merge.Strict 4823e988e451066cf8402bebd448432f
import  -/  containers-0.6.0.1:Data.Map.Strict cdbeca9dfcd61c917272d3c2b8a5e4c8
import  -/  containers-0.6.0.1:Data.Map.Strict.Internal c59f919ec34c302d6b3008d3c43cbfe7
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  text-1.2.3.1:Data.Text 681b9c3df5b4e4b4e23ef5f840f0b692
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Strict 14aa6b14c186f36ceb9dd8a7757e3d8e
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Strict.Base c4bf79bc2bd98a6b69c3b2c7023da188
bd3fe162379f5f1d4889ee097a8bcf14
  $sadjustWithKey_$sgo8 ::
    (Lola.Ident -> a1 -> a1)
    -> Lola.Ident
    -> Data.Map.Internal.Map Lola.Ident a1
    -> Data.Map.Internal.Map Lola.Ident a1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><S,1*U> -}
519081fca566b6f4b7b710aa8f60da68
  $sfind1 :: Lola.Ident -> Data.Map.Internal.Map Lola.Ident a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
4b2f221cdbafd0f2044fa8c656816220
  $sinsert_$sgo8 ::
    Lola.Ident
    -> a1
    -> Data.Map.Internal.Map Lola.Ident a1
    -> Data.Map.Internal.Map Lola.Ident a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
d880436e2fa9cde81b9a5b15d0bb73a3
  $smember1 ::
    Lola.Ident -> Data.Map.Internal.Map Lola.Ident a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7c8fe33f7d156d70730097087048f451
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Engine.Engine.$trModule3
                   Engine.Engine.$trModule1) -}
478edb00f38980bccf3d1b8e9b1ff648
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Engine.$trModule2) -}
3cdd32a24dc45491a2d5e96174500331
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Engine.Engine"#) -}
f020a3e9c076bd895d1401d20f923ff9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Engine.$trModule4) -}
b1db085ffddb28b89353b787c6bc8021
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ"#) -}
fa1ecb12f12750bd6c1b31e88b823e96
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><S,U><S,U><S,U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                           -> GHC.Prim.Int#
                           -> Data.Text.Internal.Text
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww3 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: Data.Text.Internal.Text)[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    @ GHC.Prim.RealWorld
                                    ww3
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ww3)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    ipv5
                                    ww4
                                    (Data.HashMap.Base.L
                                       @ Data.Text.Internal.Text
                                       @ v
                                       k2
                                       (w k2 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     <join 7> {- Arity: 7,
                                 Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [2] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww7 ww8 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.==# ww5 dt5 of lwild1 {
                            DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            1#
                            -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> exit
                                      w3
                                      ww6
                                      ww7
                                      (Data.Text.Internal.Text ww3 ww4 ww5)
                                      y } } } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww8 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         ww6
                                         0#
                                         ipv4
                                         0#
                                         ww8
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         ww8
                                         (Data.HashMap.Base.L
                                            @ Data.Text.Internal.Text
                                            @ v
                                            (Data.Text.Internal.Text ww3 ww4 ww5)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
2d5926671d7cc3f06ff103f4495e0585
  $w$sgo13 ::
    Lola.Ident
    -> Data.Map.Internal.Map Lola.Ident a1
    -> (# Data.Map.Internal.Map Lola.Ident a1, GHC.Maybe.Maybe a1,
          Data.Map.Internal.Map Lola.Ident a1 #)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [2] -}
fe37fa74e5be5e83c433ce2fdedd2f31
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,1*U>, Inline: [2],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
                        (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                ww
                                (GHC.Prim.uncheckedIShiftL# ww1 1#)
                                (GHC.Prim.uncheckedIShiftL# ww2 1#)
                                -2578643520546668380#
                                GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                         Engine.Engine.$wpoly_go1
                           @ v
                           (GHC.Prim.int2Word# ds2)
                           ww
                           ww1
                           ww2
                           w
                           0#
                           w1
                           w2 }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
59fc8c123c84069b74844bc5aa34adaf
  $wgetSystem ::
    [DecDyn.DeclarationDyn]
    -> [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]
    -> (# Engine.Engine.DebugInfo, Engine.Engine.Sys #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: [DecDyn.DeclarationDyn])
                   (w1 :: [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]) ->
                 let {
                   g :: StaticAnalysis.FGraph
                   = StaticAnalysis.getFGraph_go w StaticAnalysis.getFGraph_initstate
                 } in
                 let {
                   ds :: (GHC.Types.Int, [StaticAnalysis.Vert], StaticAnalysis.Vert,
                          StaticAnalysis.Vert, GHC.Types.Int)
                   = case StaticAnalysis.$wcheckGraph g of ww { (#,#) ww1 ww2 ->
                     case ww1 of wild { (,) maxlen maxpath ->
                     case ww2 of wild1 { (,,) minv0 minv1 minedge ->
                     (maxlen, maxpath, minv0, minv1, minedge) } } }
                 } in
                 (# (StaticAnalysis.dotFromGraph g,
                     case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                     maxlen },
                     case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                     maxpath },
                     case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                     minv0 },
                     case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                     minv1 },
                     case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                     minedge }),
                    Engine.Focus.Focus
                      @ (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
                      (case Engine.Focus.$wemptyPast
                              @ (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
                              (case ds of ds1 { (,,,,) maxlen maxpath minv0 minv1 minedge ->
                               case maxlen of wild { GHC.Types.I# x ->
                               case minedge of wild1 { GHC.Types.I# y ->
                               GHC.Types.I# (GHC.Prim.-# x y) } } }) of ww { (#,#) ww1 ww2 ->
                       Engine.Focus.P
                         @ (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
                         ww1
                         ww2 })
                      (GHC.Base.map
                         @ (Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic)
                         @ (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
                         (let {
                            f :: Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
                            = Engine.Engine.getSystem_go
                                w
                                (Data.Map.Internal.Tip @ Lola.Ident @ DecDyn.ExprDyn)
                          } in
                          (\ (x :: Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic) ->
                           Engine.Engine.getSystem_go13 f (Engine.Engine.getSystem_go8 x))
                            `cast`
                          (<Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic>_R
                           ->_R Data.Functor.Identity.N:Identity[0]
                                    <Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn>_R))
                         w1) #)) -}
72f8d2e76841b5b8f7b6603eaab12743
  $wgo13 ::
    Engine.Focus.Past Engine.Engine.Instant
    -> [Engine.Engine.Instant]
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> (# Engine.Focus.Past Engine.Engine.Instant,
          [Engine.Engine.Instant] #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2] -}
af52010bf0afc3bc9efeb275a1dcf584
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [2] -}
b76dbad3a9ded97c46862ba07fa0ac2f
  $wprintFocus ::
    DecDyn.Format
    -> [Engine.Engine.Instant]
    -> DecDyn.Specification
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (w :: DecDyn.Format)
                   (ww :: [Engine.Engine.Instant])
                   (w1 :: DecDyn.Specification) ->
                 case ww of wild {
                   [] -> Engine.Engine.printFocus5
                   : m ds
                   -> let {
                        ids :: [Lola.Ident]
                        = GHC.Base.map
                            @ (DecDyn.DeclarationDyn,
                               (Data.Dynamic.Dynamic -> GHC.Base.String,
                                Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
                               DecDyn.Readers, DecDyn.FromJSONers)
                            @ [GHC.Types.Char]
                            Engine.Engine.printFocus4
                            w1
                      } in
                      let {
                        apps :: [(GHC.Base.String, Data.Aeson.Types.Internal.Value)]
                        = Engine.Engine.printFocus_go
                            w1
                            (GHC.Base.map
                               @ [GHC.Types.Char]
                               @ Data.Dynamic.Dynamic
                               (\ (x :: Lola.Ident) ->
                                case Engine.Engine.$sfind1 @ DecDyn.ExprDyn x m of wild1 {
                                  DEFAULT -> Engine.Engine.printFocus3 DecDyn.DLeaf x1 -> x1 })
                               ids)
                      } in
                      case w of wild1 {
                        DecDyn.JSON
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (Data.ByteString.Lazy.Internal.unpackChars
                                (Data.ByteString.Builder.toLazyByteString
                                   (Engine.Engine.printFocus_go2
                                      ids
                                      apps
                                      (Data.HashMap.Base.Empty
                                         @ Data.Text.Internal.Text
                                         @ Data.Aeson.Types.Internal.Value))))
                             Engine.Engine.printFocus1
                        DecDyn.CSV
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (Engine.Engine.showCSVRow
                                (GHC.Base.map
                                   @ (GHC.Base.String, Data.Aeson.Types.Internal.Value)
                                   @ [GHC.Types.Char]
                                   (Data.Tuple.fst
                                      @ GHC.Base.String
                                      @ Data.Aeson.Types.Internal.Value)
                                   apps))
                             Engine.Engine.printFocus1 } }) -}
2947776981317ba02e5799e122a5c5ef
  $wprocAndPrint ::
    DecDyn.Format
    -> DecDyn.Specification
    -> Engine.Focus.Past Engine.Engine.Instant
    -> [Engine.Engine.Instant]
    -> [GHC.Base.String]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [2] -}
9f12d9d6becd9bd67cf368be80d6d6ff
  $wshowDebug ::
    GHC.Base.String
    -> GHC.Types.Int
    -> [StaticAnalysis.Vert]
    -> StaticAnalysis.Vert
    -> StaticAnalysis.Vert
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,1*U><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: [StaticAnalysis.Vert])
                   (ww3 :: StaticAnalysis.Vert)
                   (ww4 :: StaticAnalysis.Vert)
                   (ww5 :: GHC.Types.Int) ->
                 GHC.CString.unpackAppendCString#
                   Engine.Engine.run9
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww
                      (GHC.CString.unpackAppendCString#
                         Engine.Engine.run8
                         (let {
                            arg :: [GHC.Types.Char]
                            = GHC.CString.unpackAppendCString#
                                Engine.Engine.run7
                                (case ww1 of ww6 { GHC.Types.I# ww7 ->
                                 case GHC.Show.$wshowSignedInt
                                        0#
                                        ww7
                                        (GHC.Types.[] @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                 GHC.Base.++_$s++
                                   @ GHC.Types.Char
                                   (GHC.CString.unpackAppendCString#
                                      Engine.Engine.run6
                                      (GHC.Base.++_$s++
                                         @ GHC.Types.Char
                                         (GHC.CString.unpackAppendCString#
                                            Engine.Engine.run5
                                            (GHC.Base.++_$s++
                                               @ GHC.Types.Char
                                               (GHC.CString.unpackAppendCString#
                                                  Engine.Engine.run4
                                                  (case ww5 of ww11 { GHC.Types.I# ww12 ->
                                                   case GHC.Show.$wshowSignedInt
                                                          0#
                                                          ww12
                                                          (GHC.Types.[]
                                                             @ GHC.Types.Char) of ww13 { (#,#) ww14 ww15 ->
                                                   GHC.Base.++_$s++
                                                     @ GHC.Types.Char
                                                     Engine.Engine.run2
                                                     ww14
                                                     ww15 } }))
                                               GHC.Show.$fShow(,)3
                                               (GHC.Show.showLitString ww4 GHC.Show.$fShow[]1)))
                                         GHC.Show.$fShow(,)3
                                         (GHC.Show.showLitString ww3 GHC.Show.$fShow[]1)))
                                   ww9
                                   ww10 } })
                          } in
                          case ww2 of wild {
                            [] -> GHC.Base.++ @ GHC.Types.Char Engine.Engine.run1 arg
                            : x xs
                            -> GHC.Base.++_$s++
                                 @ GHC.Types.Char
                                 arg
                                 GHC.Show.showList__3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Show.showLitString
                                       x
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (case Engine.Engine.$wshowl xs of ww6 { (#,#) ww7 ww8 ->
                                           GHC.Types.: @ GHC.Types.Char ww7 ww8 })))) })))) -}
ae8559d5b1da889f0858c0d799095208
  $wshowl ::
    [[GHC.Types.Char]] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
745afd87ad6954982b9c6e8436b28d77
  $wsolve ::
    Engine.Engine.Sys
    -> DecDyn.ExprDyn -> (# DecDyn.ExprDyn, Engine.Engine.Sys #)
  {- Arity: 2, Strictness: <L,U(U(U(U(U),U(U),U,U),U(U)),U)><S,1*U>,
     Inline: [2] -}
78378ca061aa99e3fd285027dbcecf56
  $wsolveTop ::
    Engine.Focus.Past Engine.Engine.Instant
    -> [Engine.Engine.Instant]
    -> Lola.Ident
    -> (# Engine.Focus.Past Engine.Engine.Instant,
          [Engine.Engine.Instant] #)
  {- Arity: 3, Strictness: <L,U(U(U(U),U(U),U,U),U(U))><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: Engine.Focus.Past Engine.Engine.Instant)
                   (ww1 :: [Engine.Engine.Instant])
                   (w :: Lola.Ident) ->
                 case ww1 of wild {
                   []
                   -> case Engine.Engine.solveTop2
                      ret_ty (# Engine.Focus.Past Engine.Engine.Instant,
                                [Engine.Engine.Instant] #)
                      of {}
                   : m ds
                   -> let {
                        ds1 :: (DecDyn.ExprDyn, Engine.Focus.Past Engine.Engine.Instant,
                                Engine.Engine.Instant, [Engine.Engine.Instant])
                        = case Engine.Engine.$wsolve
                                 (Engine.Focus.Focus @ Engine.Engine.Instant ww wild)
                                 (Engine.Engine.$sfind1
                                    @ DecDyn.ExprDyn
                                    w
                                    m) of ww2 { (#,#) ww3 ww4 ->
                          case ww4 of wild1 { Engine.Focus.Focus p ds2 ->
                          case ds2 of wild2 {
                            [] -> Engine.Engine.solveTop1 : h r -> (ww3, p, h, r) } } }
                      } in
                      (# case ds1 of ds2 { (,,,) newexp p h r -> p },
                         GHC.Types.:
                           @ (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
                           (case ds1 of ds2 { (,,,) newexp p h r ->
                            Engine.Engine.$sadjustWithKey_$sgo8
                              @ DecDyn.ExprDyn
                              (\ (ds3 :: Lola.Ident)[OneShot] (x :: DecDyn.ExprDyn)[OneShot] ->
                               newexp)
                              w
                              h })
                           (case ds1 of ds2 { (,,,) newexp p h r -> r }) #) }) -}
4f118daeb71f9cb03bdefda1c5bd1f68
  type DebugInfo =
    (GHC.Base.String, GHC.Types.Int, [StaticAnalysis.Vert],
     StaticAnalysis.Vert, StaticAnalysis.Vert, GHC.Types.Int)
73ac600b8ee6483a87657304554b9ddc
  type Instant = Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
f937eebdab380d69075f44107be7b6c3
  type Sys = Engine.Focus.Focus Engine.Engine.Instant
3b287c156d68e5eb093b70547e5d05c3
  addDec ::
    Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> DecDyn.DeclarationDyn
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (m :: Data.Map.Internal.Map
                           Lola.Ident DecDyn.ExprDyn)
                   (ds :: DecDyn.DeclarationDyn) ->
                 case ds of wild {
                   DecDyn.DInp id -> m
                   DecDyn.DOut ds1
                   -> case ds1 of wild1 { (,) id exp ->
                      case Engine.Engine.$smember1 @ DecDyn.ExprDyn id m of wild2 {
                        GHC.Types.False
                        -> Engine.Engine.addExp
                             (Engine.Engine.$sinsert_$sgo8 @ DecDyn.ExprDyn id exp m)
                             exp
                        GHC.Types.True -> m } } }) -}
2f105484640734b7245e6ee8c887815a
  addExp ::
    Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> DecDyn.ExprDyn
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
b1dd1218f77ca38d3b0b131da552c695
  getOutExprs ::
    [DecDyn.DeclarationDyn]
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (decs :: [DecDyn.DeclarationDyn]) ->
                 letrec {
                   go :: [DecDyn.DeclarationDyn]
                         -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
                         -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: [DecDyn.DeclarationDyn])
                       (eta :: Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn) ->
                     case ds of wild {
                       [] -> eta : y ys -> go ys (Engine.Engine.addDec eta y) }
                 } in
                 go decs (Data.Map.Internal.Tip @ Lola.Ident @ DecDyn.ExprDyn)) -}
3912d81ba719b8f3898836ace8d5b86e
  getSystem ::
    [DecDyn.DeclarationDyn]
    -> [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]
    -> (Engine.Engine.DebugInfo, Engine.Engine.Sys)
  {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [DecDyn.DeclarationDyn])
                   (w1 :: [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]) ->
                 case Engine.Engine.$wgetSystem w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
6a84c3a60d829a424b5abee6a28022f0
  getSystem_go ::
    [DecDyn.DeclarationDyn]
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
6cea332c721871f80d52e625344f25f5
  getSystem_go13 ::
    Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> Data.Functor.Identity.Identity
         (Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3d0b13581da464816c2eee27beedb45c
  getSystem_go8 ::
    Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8ea4ff7b3cdd4ea49b10bdc6adb8c4e9
  printFocus ::
    DecDyn.Format
    -> Engine.Engine.Sys -> DecDyn.Specification -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S(LS),1*U(A,1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: DecDyn.Format)
                   (w1 :: Engine.Engine.Sys)
                   (w2 :: DecDyn.Specification) ->
                 case w1 of ww { Engine.Focus.Focus ww1 ww2 ->
                 Engine.Engine.$wprintFocus w ww2 w2 }) -}
80d37999b5aa8f1318e3f78ef6d1231f
  printFocus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Engine.printFocus2) -}
f601b16ed8fe53662f1d08fce6b0aa1f
  printFocus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
674e843f7a0aeed2bac2ca6ebc245850
  printFocus3 :: Data.Dynamic.Dynamic
  {- Strictness: x -}
5a7a0217f7cf1265773255a092f7e08a
  printFocus4 ::
    (DecDyn.DeclarationDyn,
     (Data.Dynamic.Dynamic -> GHC.Base.String,
      Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
     DecDyn.Readers, DecDyn.FromJSONers)
    -> Lola.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (DecDyn.DeclarationDyn,
                          (Data.Dynamic.Dynamic -> GHC.Base.String,
                           Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
                          DecDyn.Readers, DecDyn.FromJSONers)) ->
                 case x of wild { (,,,) a1 ds1 ds2 ds3 ->
                 case a1 of wild1 {
                   DecDyn.DInp x1 -> x1
                   DecDyn.DOut ds4 -> case ds4 of wild2 { (,) x1 ds5 -> x1 } } }) -}
30d7c9858721af57f561a08f00b76ccb
  printFocus5 :: GHC.Base.String
  {- Strictness: x -}
e2f01ab8fab1b7b16d75b8d26cfd8288
  printFocus_go ::
    [(DecDyn.DeclarationDyn,
      (Data.Dynamic.Dynamic -> GHC.Base.String,
       Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
      DecDyn.Readers, DecDyn.FromJSONers)]
    -> [Data.Dynamic.Dynamic]
    -> [(GHC.Base.String, Data.Aeson.Types.Internal.Value)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
5f4e3de9ffc65991d072311c5f366a7f
  printFocus_go2 ::
    [[GHC.Types.Char]]
    -> [(GHC.Base.String, Data.Aeson.Types.Internal.Value)]
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U> -}
6f51a30ee4a26f5999456a16fb93831f
  procAndPrint ::
    DecDyn.Format
    -> DecDyn.Specification -> Engine.Engine.Sys -> [GHC.Base.String]
  {- Arity: 3, Strictness: <L,U><L,U><S(LS),1*U(U,1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: DecDyn.Format)
                   (w1 :: DecDyn.Specification)
                   (w2 :: Engine.Engine.Sys) ->
                 case w2 of ww { Engine.Focus.Focus ww1 ww2 ->
                 Engine.Engine.$wprocAndPrint w w1 ww1 ww2 }) -}
1bc93295f2bf4519b6dfe74d65fcd6e8
  rshift' :: Engine.Focus.Focus a -> Engine.Focus.Focus a
  {- Arity: 1, Strictness: <L,U(U(U(U(U),U(U),U,U),U(U)),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (sys :: Engine.Focus.Focus a) ->
                 case Engine.Focus.$wshiftN @ a 1# sys of wild {
                   GHC.Maybe.Nothing -> sys GHC.Maybe.Just s -> s }) -}
082c3065ed44023139c02aa1f063b7f5
  run ::
    DecDyn.Format
    -> GHC.Types.Bool
    -> DecDyn.Specification
    -> [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,1*U>,
     Unfolding: (\ (f :: DecDyn.Format)
                   (debug :: GHC.Types.Bool)
                   (decs :: DecDyn.Specification)
                   (ins :: [Data.Map.Internal.Map Lola.Ident Data.Dynamic.Dynamic]) ->
                 let {
                   ds :: (Engine.Engine.DebugInfo, Engine.Engine.Sys)
                   = case Engine.Engine.$wgetSystem
                            (GHC.Base.map
                               @ (DecDyn.DeclarationDyn,
                                  (Data.Dynamic.Dynamic -> GHC.Base.String,
                                   Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
                                  DecDyn.Readers, DecDyn.FromJSONers)
                               @ DecDyn.DeclarationDyn
                               (DecDyn.fst4
                                  @ DecDyn.DeclarationDyn
                                  @ (Data.Dynamic.Dynamic -> GHC.Base.String,
                                     Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value)
                                  @ DecDyn.Readers
                                  @ DecDyn.FromJSONers)
                               decs)
                            ins of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   outsys :: [GHC.Types.Char]
                   = case ds of wild { (,) deb sys ->
                     case sys of ww { Engine.Focus.Focus ww1 ww2 ->
                     Engine.Engine.run_go
                       (Engine.Engine.$wprocAndPrint f decs ww1 ww2) } }
                 } in
                 case debug of wild {
                   GHC.Types.False -> outsys
                   GHC.Types.True
                   -> case ds of wild1 { (,) deb sys ->
                      case deb of ww { (,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (Engine.Engine.$wshowDebug ww1 ww2 ww3 ww4 ww5 ww6)
                        (case f of wild2 {
                           DecDyn.JSON -> outsys
                           DecDyn.CSV
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Engine.Engine.showCSVRow
                                   (GHC.Base.map
                                      @ (DecDyn.DeclarationDyn,
                                         (Data.Dynamic.Dynamic -> GHC.Base.String,
                                          Data.Dynamic.Dynamic -> Data.Aeson.Types.Internal.Value),
                                         DecDyn.Readers, DecDyn.FromJSONers)
                                      @ [GHC.Types.Char]
                                      Engine.Engine.printFocus4
                                      decs))
                                (GHC.CString.unpackAppendCString#
                                   Engine.Engine.printFocus2
                                   outsys) }) } } }) -}
339e75b1095ad2e881e5f29740bc9dc0
  run1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d7a5742f19b5fc436690011c6c53a82b
  run2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Engine.Engine.run3) -}
21d754416a733706773228c602c42d31
  run3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".\n"#) -}
fdd63ea4f9b100d3dc9870876639e0dc
  run4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" of length "#) -}
1f6e4e02b6f4d77d14aaec81e20a2263
  run5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" -> "#) -}
59d7a4e72e26a7b5c47c8b3de68ba4e5
  run6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (".\n\
                 \Min vertex: "#) -}
8d05ae319f67d10c2231e65df7da9589
  run7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \of length "#) -}
2c51a2c3ffff37281f21e47a29172982
  run8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Max path: "#) -}
31978610f281c16a5ab24002319471ff
  run9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dot file:\n"#) -}
450c967bf069c1022f95cda530edef3a
  run_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9bce9878d802898dcd3045ffd1833ce2
  showCSVRow :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a23f9672405b9f144913e1c4fde4cf8d
  showDebug :: Engine.Engine.DebugInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U),1*U,1*U,1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Engine.Engine.DebugInfo) ->
                 case w of ww { (,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Engine.Engine.$wshowDebug ww1 ww2 ww3 ww4 ww5 ww6 }) -}
e1722791b6aaf1cdb24cee24b5806e54
  solve ::
    Engine.Engine.Sys
    -> DecDyn.ExprDyn -> (DecDyn.ExprDyn, Engine.Engine.Sys)
  {- Arity: 2, Strictness: <L,U(U(U(U(U),U(U),U,U),U(U)),U)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Engine.Engine.Sys) (w1 :: DecDyn.ExprDyn) ->
                 case Engine.Engine.$wsolve w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
064110abb57d8fd7210831768e941de1
  solveFocus :: Engine.Engine.Sys -> Engine.Engine.Sys
  {- Arity: 1, Strictness: <S(LS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (sys :: Engine.Engine.Sys) ->
                 case sys of wild { Engine.Focus.Focus past ds ->
                 case ds of wild1 {
                   [] -> wild : m ds1 -> Engine.Engine.solveFocus_go13 wild m } }) -}
37be69a07a6c7d45585e22a41f8f13f4
  solveFocus_go13 ::
    Engine.Engine.Sys
    -> Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn
    -> Engine.Engine.Sys
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Engine.Engine.Sys)
                   (w1 :: Data.Map.Internal.Map Lola.Ident DecDyn.ExprDyn) ->
                 case w of ww { Engine.Focus.Focus ww1 ww2 ->
                 case Engine.Engine.$wgo13 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Engine.Focus.Focus @ Engine.Engine.Instant ww4 ww5 } }) -}
fe4198bd3c3f0100520417b291ca1c65
  solveTop :: Engine.Engine.Sys -> Lola.Ident -> Engine.Engine.Sys
  {- Arity: 2,
     Strictness: <S(LS),1*U(U(U(U(U),U(U),U,U),U(U)),1*U)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Engine.Engine.Sys) (w1 :: Lola.Ident) ->
                 case w of ww { Engine.Focus.Focus ww1 ww2 ->
                 case Engine.Engine.$wsolveTop ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Engine.Focus.Focus @ Engine.Engine.Instant ww4 ww5 } }) -}
9ddca97828d38b142f258bc8f3afe7ff
  solveTop1 ::
    (DecDyn.ExprDyn, Engine.Focus.Past Engine.Engine.Instant,
     Engine.Engine.Instant, [Engine.Engine.Instant])
  {- Strictness: x -}
bcb9078ec4605a84f796b4d9c75c9238
  solveTop2 :: Engine.Engine.Sys
  {- Strictness: x -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

