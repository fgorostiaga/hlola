
==================== FINAL INTERFACE ====================
2019-10-21 10:04:10.452668 UTC

interface HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ:Engine.Focus 8065
  interface hash: 6cf7bc1f2883565c037e1bc9dd48bafc
  ABI hash: 99328e13d216e25861824102ee6077a6
  export-list hash: 1b285650392cd65ec48e56be41a29513
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 152fc13024de91493cf12aeed6735708
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Engine.Focus.emptyPast
  Engine.Focus.shiftN
  Engine.Focus.Focus{Engine.Focus.Focus future past}
module dependencies:
package dependencies: array-0.5.3.0* base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  array-0.5.3.0:Data.Array 92f4b3399a96adb44649ce9a9d6cd419
import  -/  base-4.12.0.0:Data.Tuple c719fc29608fe81c10bee9a1bf1e05ff
import  -/  base-4.12.0.0:GHC.Arr ec26aa94fff9ed31a6fa85d884b35f3c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
a25328992323c262b49d31b1c7d36951
  $fShowFocus ::
    GHC.Show.Show a => GHC.Show.Show (Engine.Focus.Focus a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,C(C1(U)))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Engine.Focus.Focus a)
                  (Engine.Focus.$fShowFocus_$cshowsPrec1 @ a v)
                  (Engine.Focus.$fShowFocus_$cshow @ a v)
                  (Engine.Focus.$fShowFocus_$cshowList @ a v) -}
970b4c84bce51f416e061e3527519fd5
  $fShowFocus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Focus.$fShowFocus2) -}
c0a3939e46a2157155d23a695f29f3d8
  $fShowFocus10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FOCUS ("#) -}
7a831bf1a45a6574995baecc6b3fe1b6
  $fShowFocus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
35ef8b7a36e3e5de5dd376ab46eb766d
  $fShowFocus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
435fbcdd14d5e32c75cd6f2ee2c768db
  $fShowFocus4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
02e0c249de0ac30064494ecce2d9d450
  $fShowFocus5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
54dfe392b4860d53b8a4a355a729dd57
  $fShowFocus6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ind = "#) -}
80815a6aed115e63fe1d3308d53a951c
  $fShowFocus7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("arr = "#) -}
bfae221e50e4a32875352839c875f76b
  $fShowFocus8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Focus.$fShowFocus9) -}
f3a86e1acc947c9b99e75b075bb62a8d
  $fShowFocus9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("P {"#) -}
a25328992323c262b49d31b1c7d36951
  $fShowFocus_$cshow ::
    GHC.Show.Show a => Engine.Focus.Focus a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,C(C1(U)))><S,1*U(U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Show.Show a) (w1 :: Engine.Focus.Focus a) ->
                 case w1 of ww { Engine.Focus.Focus ww1 ww2 ->
                 Engine.Focus.$w$cshow @ a w ww1 ww2 }) -}
a25328992323c262b49d31b1c7d36951
  $fShowFocus_$cshowList ::
    GHC.Show.Show a => [Engine.Focus.Focus a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,C(C1(U)))><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Engine.Focus.Focus a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Engine.Focus.Focus a)
                   (\ (x :: Engine.Focus.Focus a) (s1 :: GHC.Base.String)[OneShot] ->
                    case x of ww { Engine.Focus.Focus ww1 ww2 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Engine.Focus.$w$cshow @ a $dShow ww1 ww2)
                      s1 })
                   ls
                   s) -}
dce81188e54a79d21799d217e7055c6e
  $fShowFocus_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Engine.Focus.Past a -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) ->
                 let {
                   $dShow1 :: GHC.Show.Show (Engine.Focus.Possible a)
                   = Engine.Focus.$fShowPossible @ a $dShow
                 } in
                 \ (a1 :: GHC.Types.Int) (ds :: Engine.Focus.Past a) ->
                 case ds of wild { Engine.Focus.P b1 b2 ->
                 case a1 of wild1 { GHC.Types.I# x ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Arr.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ (Engine.Focus.Possible a)
                       GHC.Arr.$fIxInt
                       GHC.Show.$fShowInt
                       $dShow1
                       0#
                       b1
                 } in
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Engine.Focus.$fShowFocus8
                        (GHC.CString.unpackAppendCString#
                           Engine.Focus.$fShowFocus7
                           (f (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Engine.Focus.$fShowFocus6
                                    (case b2 of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww3
                                            (GHC.CString.unpackAppendCString#
                                               Engine.Focus.$fShowFocus5
                                               x1) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))))
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Engine.Focus.$fShowFocus8
                           (GHC.CString.unpackAppendCString#
                              Engine.Focus.$fShowFocus7
                              (f (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Engine.Focus.$fShowFocus6
                                       (case b2 of ww2 { GHC.Types.I# ww3 ->
                                        case GHC.Show.$wshowSignedInt
                                               0#
                                               ww3
                                               (GHC.CString.unpackAppendCString#
                                                  Engine.Focus.$fShowFocus5
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)2
                                                     x1)) of ww4 { (#,#) ww5 ww6 ->
                                        GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))))) } } }) -}
a25328992323c262b49d31b1c7d36951
  $fShowFocus_$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Engine.Focus.Focus a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C(U))),A,C(C1(U)))><L,A><S,1*U(U,U)><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (x :: Engine.Focus.Focus a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Engine.Focus.$fShowFocus_$cshow @ a $dShow x))
                   s) -}
dce81188e54a79d21799d217e7055c6e
  $fShowPast ::
    GHC.Show.Show a => GHC.Show.Show (Engine.Focus.Past a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Engine.Focus.Past a)
                  (Engine.Focus.$fShowFocus_$cshowsPrec @ a v)
                  (Engine.Focus.$fShowPast_$cshow @ a v)
                  (Engine.Focus.$fShowPast_$cshowList @ a v) -}
dce81188e54a79d21799d217e7055c6e
  $fShowPast_$cshow ::
    GHC.Show.Show a => Engine.Focus.Past a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Engine.Focus.Past a) ->
                 Engine.Focus.$fShowFocus_$cshowsPrec
                   @ a
                   $dShow
                   Engine.Focus.$fShowFocus4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dce81188e54a79d21799d217e7055c6e
  $fShowPast_$cshowList ::
    GHC.Show.Show a => [Engine.Focus.Past a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Engine.Focus.Past a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Engine.Focus.Past a)
                   (Engine.Focus.$fShowFocus_$cshowsPrec
                      @ a
                      $dShow
                      Engine.Focus.$fShowFocus4)
                   ls
                   s) -}
fca6bdd541f2a904f11315144bdcd019
  $fShowPossible ::
    GHC.Show.Show a => GHC.Show.Show (Engine.Focus.Possible a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Engine.Focus.Possible a)
                  (Engine.Focus.$fShowPossible_$cshowsPrec @ a v)
                  (Engine.Focus.$fShowPossible_$cshow @ a v)
                  (Engine.Focus.$fShowPossible_$cshowList @ a v) -}
15ffcad828ebc547505ae36e1614a5ff
  $fShowPossible1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Focus.$fShowPossible2) -}
19d777cdcd909f271bca4b08de7590cc
  $fShowPossible2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JustPos "#) -}
0dd906be2a1eb25b0f8b02bac84dd314
  $fShowPossible3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
44a4f277b360972eea161e1cd8b4a7db
  $fShowPossible4 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Engine.Focus.$fShowPossible5) -}
82dec32e6ca1868bab5695b2db6e6bb9
  $fShowPossible5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Focus.$fShowPossible6) -}
abf66d738e857a90e0a6af6d8580c627
  $fShowPossible6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fail"#) -}
5f72aac8e6c2f6ee394440e5626459ba
  $fShowPossible7 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Engine.Focus.$fShowPossible8) -}
fd4269441e7748495c597d8393c3d42e
  $fShowPossible8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Engine.Focus.$fShowPossible9) -}
82040657b86b718aee2121dbbc55bcf1
  $fShowPossible9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Outside"#) -}
fca6bdd541f2a904f11315144bdcd019
  $fShowPossible_$cshow ::
    GHC.Show.Show a => Engine.Focus.Possible a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Engine.Focus.Possible a) ->
                 case x of wild {
                   Engine.Focus.Outside -> Engine.Focus.$fShowPossible8
                   Engine.Focus.Fail -> Engine.Focus.$fShowPossible5
                   Engine.Focus.JustPos b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Engine.Focus.$fShowPossible1
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Engine.Focus.$fShowPossible3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
fca6bdd541f2a904f11315144bdcd019
  $fShowPossible_$cshowList ::
    GHC.Show.Show a => [Engine.Focus.Possible a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Engine.Focus.Possible a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Engine.Focus.Possible a)
                   (Engine.Focus.$fShowPossible_$cshowsPrec
                      @ a
                      $dShow
                      Engine.Focus.$fShowFocus4)
                   ls
                   s) -}
fca6bdd541f2a904f11315144bdcd019
  $fShowPossible_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Engine.Focus.Possible a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (ds1 :: Engine.Focus.Possible a) ->
                 case ds1 of wild {
                   Engine.Focus.Outside -> Engine.Focus.$fShowPossible7
                   Engine.Focus.Fail -> Engine.Focus.$fShowPossible4
                   Engine.Focus.JustPos b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow Engine.Focus.$fShowPossible3 b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Engine.Focus.$fShowPossible1 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Engine.Focus.$fShowPossible1
                                (g (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      x1))) } } }) -}
d1f516aac9370d299a4de9ee757b6eb4
  $tc'Fail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10221666342559513885##
                   17086529363452302905##
                   Engine.Focus.$trModule
                   Engine.Focus.$tc'Fail2
                   1#
                   Engine.Focus.$tc'Fail1) -}
94259b7c6e8489783c6ff79384b3a234
  $tc'Fail1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b994fd1c411eb5102820c3f0c69cd765
  $tc'Fail2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tc'Fail3) -}
b12c6aba1ed9a8a3618eecfcb562dfdc
  $tc'Fail3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fail"#) -}
30c6a65cbb876b66067f1224dab7c68e
  $tc'Focus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17605587889214008667##
                   17715855625753966326##
                   Engine.Focus.$trModule
                   Engine.Focus.$tc'Focus2
                   1#
                   Engine.Focus.$tc'Focus1) -}
ae4aef7fd16f387e29132c3975a177c0
  $tc'Focus1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c51706d8087744c881a29305f123786c
  $tc'Focus2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tc'Focus3) -}
1352f2eb5cdfd27ffd54193ba02a5edc
  $tc'Focus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Focus"#) -}
429737ae3abbdf7db2b507fdf9911799
  $tc'JustPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16218274547304090242##
                   1197319437228302654##
                   Engine.Focus.$trModule
                   Engine.Focus.$tc'JustPos2
                   1#
                   Engine.Focus.$tc'JustPos1) -}
08c0a80afdd7eb2a5a34504d0e0f9175
  $tc'JustPos1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f6d9a60ca0ea90b122040c291507ae1e
  $tc'JustPos2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tc'JustPos3) -}
bf82f0a9d8422191b518778017196268
  $tc'JustPos3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JustPos"#) -}
7753bb4e78724d94ca6e5ec0478034db
  $tc'Outside :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1545078131163251868##
                   2258470708156997181##
                   Engine.Focus.$trModule
                   Engine.Focus.$tc'Outside1
                   1#
                   Engine.Focus.$tc'Fail1) -}
9560996e2d98980b3fbc18096d8b4ddc
  $tc'Outside1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tc'Outside2) -}
451e1aaff30f75438aeb1689af245614
  $tc'Outside2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Outside"#) -}
43de873ca873fba75d5adb6337b08830
  $tc'P :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9132824712952959527##
                   3341727753078719772##
                   Engine.Focus.$trModule
                   Engine.Focus.$tc'P2
                   1#
                   Engine.Focus.$tc'P1) -}
60f443a1cffaaddcaf08cc49bd247de2
  $tc'P1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
39fd5b2678f3518f3fd62ac3ac8e5d0c
  $tc'P2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tc'P3) -}
6d473963e58bcf742ba277a0bf3d7e97
  $tc'P3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'P"#) -}
7f89c57604f97493ffb15ecf30b9fa39
  $tcFocus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8975966749184859482##
                   930996642190216482##
                   Engine.Focus.$trModule
                   Engine.Focus.$tcFocus1
                   0#
                   GHC.Types.krep$*Arr*) -}
30541546867a9ff869981e4edfa16ab4
  $tcFocus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tcFocus2) -}
06f31d1439acdc88f16a6cbaca6c0467
  $tcFocus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Focus"#) -}
cec6318312d6b4fa8fcf87261200a846
  $tcPast :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4360901863523129163##
                   116670568737961799##
                   Engine.Focus.$trModule
                   Engine.Focus.$tcPast1
                   0#
                   GHC.Types.krep$*Arr*) -}
831ff23fcae033aa8076097aeac01c6f
  $tcPast1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tcPast2) -}
7176dd48532b7be8b08d174c88bea471
  $tcPast2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Past"#) -}
9443feff2cac21ea0d4150717e1107b1
  $tcPossible :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18148928009775771533##
                   3167065715036712908##
                   Engine.Focus.$trModule
                   Engine.Focus.$tcPossible1
                   0#
                   GHC.Types.krep$*Arr*) -}
f3ca5e2dbc21aca75946aeb36c8f5c6e
  $tcPossible1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$tcPossible2) -}
11bc1b381c84e29655103b75dc258783
  $tcPossible2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Possible"#) -}
10ce1ce8d9375689eadb67b00a90e1ec
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Engine.Focus.$trModule3
                   Engine.Focus.$trModule1) -}
3fc7c92ed4c33f35a0c6e5839658bcf6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$trModule2) -}
6a4e8186684f98974bc34d0dcd7ab0a5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Engine.Focus"#) -}
84cd835ab7aa54e489425dc4a12da27a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Engine.Focus.$trModule4) -}
a4b56ae81e70b5724974553bc8a6dd7e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HLola-0.1.0.0-81UMLq1MGfHEYLEYD1xjiJ"#) -}
8e0cdec0fa310b1f83a2fd47b4bd8099
  $w$cshow ::
    GHC.Show.Show a => Engine.Focus.Past a -> [a] -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,1*C1(C1(U)))><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: Engine.Focus.Past a)
                   (ww1 :: [a]) ->
                 GHC.CString.unpackAppendCString#
                   Engine.Focus.$fShowFocus10
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Engine.Focus.$fShowFocus_$cshowsPrec
                         @ a
                         w
                         Engine.Focus.$fShowFocus4
                         ww
                         (GHC.Types.[] @ GHC.Types.Char))
                      (GHC.CString.unpackAppendCString#
                         Engine.Focus.$fShowFocus3
                         (GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Show.showList @ a w ww1 (GHC.Types.[] @ GHC.Types.Char))
                            Engine.Focus.$fShowFocus1)))) -}
3d60c2a6ff55a6dcc98e5d88ad5e9ebf
  $wemptyPast ::
    GHC.Types.Int
    -> (# GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a),
          GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [2],
     Unfolding: (\ @ a (w :: GHC.Types.Int) ->
                 (# case w of wild2 { GHC.Types.I# n ->
                    let {
                      $j :: GHC.Prim.Int#
                            -> GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a)
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (x :: GHC.Prim.Int#)[OneShot] ->
                        case GHC.Prim.<# x 0# of lwild {
                          DEFAULT
                          -> case GHC.Magic.runRW#
                                    @ ('GHC.Types.TupleRep
                                         '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                    @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a) #)
                                    (\ (s1# :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.newArray#
                                            @ (Engine.Focus.Possible a)
                                            @ GHC.Prim.RealWorld
                                            x
                                            (GHC.Arr.arrEleBottom @ (Engine.Focus.Possible a))
                                            s1# of ds1 { (#,#) ipv ipv1 ->
                                     case GHC.Prim.># 0# n of lwild1 {
                                       DEFAULT
                                       -> let {
                                            exit :: GHC.Prim.Int#
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Arr.Array
                                                            GHC.Types.Int
                                                            (Engine.Focus.Possible a) #)
                                              <join 1> {- Arity: 1, Strictness: <B,U>b -}
                                            = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                                              case Engine.Focus.emptyPast1 x1 wild2
                                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        GHC.Arr.Array
                                                          GHC.Types.Int (Engine.Focus.Possible a) #)
                                              of {}
                                          } in
                                          let {
                                            exit1 :: GHC.Prim.Int#
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Arr.Array
                                                             GHC.Types.Int
                                                             (Engine.Focus.Possible a) #)
                                              <join 1> {- Arity: 1, Strictness: <B,U>b -}
                                            = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                                              case Engine.Focus.emptyPast1 x1 wild2
                                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        GHC.Arr.Array
                                                          GHC.Types.Int (Engine.Focus.Possible a) #)
                                              of {}
                                          } in
                                          let {
                                            exit2 :: GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Arr.Array
                                                             GHC.Types.Int
                                                             (Engine.Focus.Possible a) #)
                                              <join 1> {- Arity: 1, Strictness: <S,U> -}
                                            = \ (s2# :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                              case GHC.Prim.unsafeFreezeArray#
                                                     @ GHC.Prim.RealWorld
                                                     @ (Engine.Focus.Possible a)
                                                     ipv1
                                                     s2# of ds2 { (#,#) ipv2 ipv3 ->
                                              (# ipv2,
                                                 GHC.Arr.Array
                                                   @ GHC.Types.Int
                                                   @ (Engine.Focus.Possible a)
                                                   Engine.Focus.$fShowFocus4
                                                   wild2
                                                   x
                                                   ipv3 #) }
                                          } in
                                          letrec {
                                            go :: GHC.Prim.Int#
                                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        GHC.Arr.Array
                                                          GHC.Types.Int (Engine.Focus.Possible a) #)
                                              <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                                            = \ (x1 :: GHC.Prim.Int#)
                                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              case GHC.Prim.<=# 0# x1 of lwild2 {
                                                DEFAULT -> exit x1
                                                1#
                                                -> case GHC.Prim.<=# x1 n of lwild3 {
                                                     DEFAULT -> exit1 x1
                                                     1#
                                                     -> case GHC.Prim.writeArray#
                                                               @ GHC.Prim.RealWorld
                                                               @ (Engine.Focus.Possible a)
                                                               ipv1
                                                               x1
                                                               (Engine.Focus.Outside @ a)
                                                               eta of s2# { DEFAULT ->
                                                        case GHC.Prim.==# x1 n of lwild4 {
                                                          DEFAULT -> go (GHC.Prim.+# x1 1#) s2#
                                                          1# -> exit2 s2# } } } }
                                          } in
                                          go 0# ipv
                                       1#
                                       -> case GHC.Prim.unsafeFreezeArray#
                                                 @ GHC.Prim.RealWorld
                                                 @ (Engine.Focus.Possible a)
                                                 ipv1
                                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                                          (# ipv2,
                                             GHC.Arr.Array
                                               @ GHC.Types.Int
                                               @ (Engine.Focus.Possible a)
                                               Engine.Focus.$fShowFocus4
                                               wild2
                                               x
                                               ipv3 #) } } }) of ds1 { (#,#) ipv ipv1 ->
                             ipv1 }
                          1#
                          -> case GHC.Arr.negRange
                             ret_ty (GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a))
                             of {} }
                    } in
                    case GHC.Prim.<=# 0# n of lwild {
                      DEFAULT -> $j 0# 1# -> $j (GHC.Prim.+# n 1#) } },
                    Engine.Focus.$fShowFocus4 #)) -}
18681fcbad077a451957f048fe7fa341
  $wshiftN ::
    GHC.Prim.Int#
    -> Engine.Focus.Focus a -> GHC.Maybe.Maybe (Engine.Focus.Focus a)
  {- Arity: 2, Strictness: <S,1*U><L,U(U(U(U(U),U(U),U,U),U(U)),U)>,
     Inline: [2] -}
a25328992323c262b49d31b1c7d36951
  data Focus a = Focus {past :: Engine.Focus.Past a, future :: [a]}
dce81188e54a79d21799d217e7055c6e
  data Past a
    = P {arr :: GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a),
         ind :: GHC.Types.Int}
fca6bdd541f2a904f11315144bdcd019
  data Possible a = Outside | Fail | JustPos a
dce81188e54a79d21799d217e7055c6e
  arr ::
    Engine.Focus.Past a
    -> GHC.Arr.Array GHC.Types.Int (Engine.Focus.Possible a)
  RecSel Left Engine.Focus.Past
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Engine.Focus.Past a) ->
                 case ds of wild { Engine.Focus.P ds1 ds2 -> ds1 }) -}
0f385e15ed993ce21447aaff3ebc069b
  emptyPast :: GHC.Types.Int -> Engine.Focus.Past a
  {- Arity: 1, Strictness: <L,1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Types.Int) ->
                 case Engine.Focus.$wemptyPast @ a w of ww { (#,#) ww1 ww2 ->
                 Engine.Focus.P @ a ww1 ww2 }) -}
b836a178cd9732a71e45e0b4f5b9bb74
  emptyPast1 :: GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <B,U><B,U>x -}
a25328992323c262b49d31b1c7d36951
  future :: Engine.Focus.Focus a -> [a]
  RecSel Left Engine.Focus.Focus
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Engine.Focus.Focus a) ->
                 case ds of wild { Engine.Focus.Focus ds1 ds2 -> ds2 }) -}
dce81188e54a79d21799d217e7055c6e
  ind :: Engine.Focus.Past a -> GHC.Types.Int
  RecSel Left Engine.Focus.Past
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Engine.Focus.Past a) ->
                 case ds of wild { Engine.Focus.P ds1 ds2 -> ds2 }) -}
a25328992323c262b49d31b1c7d36951
  past :: Engine.Focus.Focus a -> Engine.Focus.Past a
  RecSel Left Engine.Focus.Focus
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Engine.Focus.Focus a) ->
                 case ds of wild { Engine.Focus.Focus ds1 ds2 -> ds1 }) -}
19cabc28c325d2445e2ffe999e589701
  shiftN ::
    GHC.Types.Int
    -> Engine.Focus.Focus a -> GHC.Maybe.Maybe (Engine.Focus.Focus a)
  {- Arity: 2,
     Strictness: <S(S),1*U(1*U)><L,U(U(U(U(U),U(U),U,U),U(U)),U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: Engine.Focus.Focus a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Engine.Focus.$wshiftN @ a ww1 w1 }) -}
instance [safe] GHC.Show.Show [Engine.Focus.Focus]
  = Engine.Focus.$fShowFocus
instance [safe] GHC.Show.Show [Engine.Focus.Past]
  = Engine.Focus.$fShowPast
instance [safe] GHC.Show.Show [Engine.Focus.Possible]
  = Engine.Focus.$fShowPossible
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

