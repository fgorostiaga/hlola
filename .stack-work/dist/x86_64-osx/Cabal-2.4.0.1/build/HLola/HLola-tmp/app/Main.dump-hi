
==================== FINAL INTERFACE ====================
2019-10-21 10:04:23.226527 UTC

interface main:Main 8065
  interface hash: d721a27252a46320885833e6cd33efd8
  ABI hash: 9901b5765c7ba10bea70dceaf1f43ee3
  export-list hash: a18a963a48794cf64ac993d05543dfd4
  orphan hash: 6a8bdbe61fa337d5e6af2da340456cf8
  flag hash: 99898dba8127583bac8d88bd24912fac
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.getIn
  Main.main
  Main.parseArgs
module dependencies:
package dependencies: HLola-0.1.0.0 MissingH-1.4.1.0 aeson-1.4.5.0
                      array-0.5.3.0 attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 binary-0.8.6.0 bytestring-0.10.8.2
                      containers-0.6.0.1 deepseq-1.4.4.0 dlist-0.8.0.7 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 primitive-0.6.4.0 random-1.1
                      scientific-0.3.6.2 tagged-0.8.6 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2 time-compat-1.9.2.2 transformers-0.5.6.2
                      unordered-containers-0.2.10.0 uuid-types-1.0.3 vector-0.12.0.3
orphans: HLola-0.1.0.0:Syntax.Num
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.5.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.7:Data.DList ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
import  -/  HLola-0.1.0.0:DecDyn e44279c7ab4d42b81c75c5ed2ac16b6e
import  -/  HLola-0.1.0.0:Engine.Engine c103f4c6235ee1aa973ee1956288e946
import  -/  HLola-0.1.0.0:Example.Empirical 098ca686efb6469e7b066cb050989067
import  -/  base-4.12.0.0:Data.Dynamic ef74395f5e02d1f1b1dbed7092c8bd30
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.Environment c54e0d0308e729fdace6bc37aa74bb52
import  -/  base-4.12.0.0:System.IO c961e5ee6731c0683a6e879272c9e9f6
import  -/  base-4.12.0.0:Text.Read 87f80fc2538a174aea915dd98f74fc0a
import  -/  containers-0.6.0.1:Data.Map.Strict cdbeca9dfcd61c917272d3c2b8a5e4c8
import  -/  containers-0.6.0.1:Data.Map.Strict.Internal c59f919ec34c302d6b3008d3c43cbfe7
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
d1972cabb048088fe3553b23fbaad508
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  wild2
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)) } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } } }) -}
5d07c1cbd74d153433e30077616beb23
  $sfromList1 ::
    [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
76e0303cf781ad26b5a6a05344e0fa66
  $sinsert_$sgo8 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
35abb97589e0b7020164899b2eef08e0
  $wparseArgs ::
    [GHC.Base.String]
    -> (# Example.Empirical.TestType, GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: [GHC.Base.String]) ->
                 case w of wild {
                   []
                   -> case Main.main8
                      ret_ty (# Example.Empirical.TestType, GHC.Types.Int,
                                GHC.Types.Int #)
                      of {}
                   : tt ds
                   -> case ds of wild1 {
                        []
                        -> case Main.main8
                           ret_ty (# Example.Empirical.TestType, GHC.Types.Int,
                                     GHC.Types.Int #)
                           of {}
                        : n ds1
                        -> case ds1 of wild2 {
                             []
                             -> case Main.main8
                                ret_ty (# Example.Empirical.TestType, GHC.Types.Int,
                                          GHC.Types.Int #)
                                of {}
                             : m ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> (# case Text.Read.readEither8
                                               @ Example.Empirical.TestType
                                               (Text.ParserCombinators.ReadP.run
                                                  @ Example.Empirical.TestType
                                                  Main.main7
                                                  tt) of wild4 {
                                          [] -> Main.main6
                                          : x ds3
                                          -> case ds3 of wild5 {
                                               [] -> x : ipv ipv1 -> Main.main5 } },
                                        case Text.Read.readEither8
                                               @ GHC.Types.Int
                                               (Text.ParserCombinators.ReadP.run
                                                  @ GHC.Types.Int
                                                  Main.main4
                                                  n) of wild4 {
                                          [] -> Main.main3
                                          : x ds3
                                          -> case ds3 of wild5 {
                                               [] -> x : ipv ipv1 -> Main.main2 } },
                                        case Text.Read.readEither8
                                               @ GHC.Types.Int
                                               (Text.ParserCombinators.ReadP.run
                                                  @ GHC.Types.Int
                                                  Main.main4
                                                  m) of wild4 {
                                          [] -> Main.main3
                                          : x ds3
                                          -> case ds3 of wild5 {
                                               [] -> x : ipv ipv1 -> Main.main2 } } #)
                                  : ipv ipv1
                                  -> case Main.main8
                                     ret_ty (# Example.Empirical.TestType, GHC.Types.Int,
                                               GHC.Types.Int #)
                                     of {} } } } }) -}
9353f38123936ff48c0cb0b1cb88e9e2
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
a57ba295f33eb677328638f81346345c
  getIn ::
    (GHC.Num.Num b, GHC.Enum.Enum b) =>
    b -> [Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic]
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(LLLLLLC(C(S))L),1*U(A,A,A,A,A,A,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   ($dNum :: GHC.Num.Num b)
                   ($dEnum :: GHC.Enum.Enum b)
                   (n :: b) ->
                 GHC.Base.build
                   @ (Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic)
                   (\ @ b1
                      (c :: Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic
                            -> b1 -> b1)[OneShot]
                      (n1 :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ b
                      @ b1
                      (GHC.Base.mapFB
                         @ (Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic)
                         @ b1
                         @ b
                         c
                         (Main.getIn12 @ b))
                      n1
                      (GHC.Enum.enumFromTo
                         @ b
                         $dEnum
                         (GHC.Num.fromInteger @ b $dNum Main.getIn11)
                         n))) -}
ecf66719aefdb05d851e5dd182cf7b50
  getIn1 :: [([GHC.Types.Char], Data.Dynamic.Dynamic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Data.Dynamic.Dynamic)
                   Main.getIn8
                   Main.getIn2) -}
42f774354cd9d7a554aa5dc54b953ea8
  getIn10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p"#) -}
f89e0b1657e7ed28c1a7f38445e37b6e
  getIn11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c9fac92699c8233f234b944ea3ac8ad4
  getIn12 ::
    b -> Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ b (ds :: b) -> Main.getIn_x) -}
5e665b54c265112edb923a7ddcd690f0
  getIn2 :: [([GHC.Types.Char], Data.Dynamic.Dynamic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Data.Dynamic.Dynamic)
                   Main.getIn3
                   (GHC.Types.[] @ ([GHC.Types.Char], Data.Dynamic.Dynamic))) -}
9f2bea4899bab563beb10001ebf1f387
  getIn3 :: ([GHC.Types.Char], Data.Dynamic.Dynamic)
  {- Strictness: m, Unfolding: ((Main.getIn6, Main.getIn4)) -}
2b86f582643e39941665675cd8f5df99
  getIn4 :: Data.Dynamic.Dynamic
  {- Unfolding: (Data.Dynamic.Dynamic
                   @ GHC.Types.Bool
                   Main.getIn5
                   GHC.Types.True) -}
0ed4f5504c3cdb63b06bfce06b909d2b
  getIn5 :: Data.Typeable.Internal.TypeRep GHC.Types.Bool
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Bool
                        14182099612280475667##
                        2734577064602454082##
                        GHC.Types.$trModule
                        GHC.Types.$tcBool1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ GHC.Types.Bool
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
060f0d0b3d81f3911cb1b98850ec47e2
  getIn6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.getIn7) -}
95e9686c5c8ffa9220f9ce96de389a22
  getIn7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("q"#) -}
5389b2ae508f542e0860536935e6c92f
  getIn8 :: ([GHC.Types.Char], Data.Dynamic.Dynamic)
  {- Strictness: m, Unfolding: ((Main.getIn9, Main.getIn4)) -}
540a17f5585a89b217387f105bec901c
  getIn9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.getIn10) -}
aaecbc0fa4f676dbc65d894790018f9b
  getIn_x ::
    Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic
  {- Unfolding: (Main.$sfromList
                   @ Data.Dynamic.Dynamic
                   Main.getIn1) -}
577854be12c75dc4d6eb617376828778
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ae1c9765a926bdb75289b5decab1a9e1
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        GHC.IO.Handle.FD.stdin
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.$wparseArgs ipv1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    (Engine.Engine.run
                       DecDyn.CSV
                       GHC.Types.False
                       (case Example.Empirical.$wgetSpec ww1 ww2 of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ DecDyn.DecDyn ww5 ww6 })
                       (case ww3 of wild1 { GHC.Types.I# y ->
                        case GHC.Prim.># 0# y of lwild {
                          DEFAULT
                          -> letrec {
                               go :: GHC.Prim.Int#
                                     -> [Data.Map.Internal.Map
                                           [GHC.Types.Char] Data.Dynamic.Dynamic]
                                 {- Arity: 1, Strictness: <L,U> -}
                               = \ (x :: GHC.Prim.Int#) ->
                                 GHC.Types.:
                                   @ (Data.Map.Internal.Map [GHC.Types.Char] Data.Dynamic.Dynamic)
                                   Main.getIn_x
                                   (case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#)
                                      1#
                                      -> GHC.Types.[]
                                           @ (Data.Map.Internal.Map
                                                [GHC.Types.Char] Data.Dynamic.Dynamic) })
                             } in
                             go 0#
                          1#
                          -> GHC.Types.[]
                               @ (Data.Map.Internal.Map
                                    [GHC.Types.Char] Data.Dynamic.Dynamic) } }))
                    GHC.Types.True)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv2 } } }) -}
ca55ed4e699ba960e2bb8ade6e30eab6
  main2 :: GHC.Types.Int
  {- Strictness: x -}
ffb569146bf9df9d2f5eb75d1ab97a0a
  main3 :: GHC.Types.Int
  {- Strictness: x -}
9edc783766bc63d40f2549a0ba4b622f
  main4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
1561c475b5406a44d2364b09eafb6f62
  main5 :: Example.Empirical.TestType
  {- Strictness: x -}
c452c138c73410961fd7aa1a45f2a9c7
  main6 :: Example.Empirical.TestType
  {- Strictness: x -}
998e6a2c119da06aa2451440fbc0127b
  main7 :: Text.ParserCombinators.ReadP.P Example.Empirical.TestType
  {- Unfolding: (GHC.Read.$fRead()6
                   @ Example.Empirical.TestType
                   Example.Empirical.$fReadTestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Example.Empirical.TestType>_R))
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ Example.Empirical.TestType
                   (Text.Read.readEither7 @ Example.Empirical.TestType)) -}
21ec5768f83438110457325a14c8fb0a
  main8 :: (Example.Empirical.TestType, GHC.Types.Int, GHC.Types.Int)
  {- Strictness: x -}
14feb7b31437cd92bdce8b9d7f2afeb4
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
38bfc45ae38fb8a56e0cd5e30c46af03
  parseArgs ::
    [GHC.Base.String]
    -> (Example.Empirical.TestType, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 case Main.$wparseArgs w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
"SPEC/Main fromList @ [Char] _" [orphan] forall @ a
                                                ($dOrd :: GHC.Classes.Ord [GHC.Types.Char])
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Main.$sfromList @ a
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

